{"version":3,"sources":["components/addComment/styles.module.scss","components/preloader/styles.module.scss","features/app/styles.module.scss","components/editProfileModal/styles.module.scss","components/sidebar/styles.module.scss","features/profile/post/styles.module.scss","features/registration/styles.module.scss","reportWebVitals.ts","api/api.ts","redux/appReducer.ts","redux/AuthReducer.ts","redux/ProfileReducer.ts","redux/registrationReducer.ts","redux/PostsReducer.ts","redux/ChatReducer.ts","redux/redux-store.ts","components/sidebar/Sidebar.tsx","components/preloader/Preloader.tsx","utils/constants.ts","components/header/Header.tsx","components/hoc/WithSuspense.tsx","assets/Avatar.svg","utils/toCorrectTime.ts","components/comment/Comment.tsx","components/addComment/AddComment.tsx","utils/topics.ts","components/postModal/PostModal.tsx","utils/changeTopicLabel.ts","features/profile/post/ProfilePost.tsx","components/editProfileModal/EditProfileModal.tsx","utils/findLabelByValue.ts","features/profile/Profile.tsx","features/login/Login.tsx","features/registration/Registration.tsx","features/posts/Posts.tsx","components/changePhotoModal/ChangePhotoModal.tsx","features/settings/profileSettingsCard/ProfileSettingsCard.tsx","features/settings/infroSettingsCard/InfoSettingsCard.tsx","features/settings/interestsSettingCard/InterestsSettingCard.tsx","features/settings/passwordSettingCard/PasswordSettingCard.tsx","features/settings/Settings.tsx","features/chat/channelMessages/ChannelMessages.tsx","components/addChannelModal/AddChannelModal.tsx","features/chat/Channels.tsx","components/routes/Routes.tsx","features/app/App.tsx","index.tsx","features/login/styles.module.scss","components/postModal/styles.module.scss","features/profile/styles.module.scss","components/addChannelModal/styles.module.scss","features/chat/channelMessages/styles.module.scss","features/settings/infroSettingsCard/styles.module.scss","features/settings/passwordSettingCard/styles.module.scss","components/changePhotoModal/styles.module.scss","components/comment/styles.module.scss","features/settings/interestsSettingCard/styles.module.scss","components/header/styles.module.scss","features/settings/profileSettingsCard/styles.module.scss","features/chat/styles.module.scss","features/posts/styles.module.scss","features/settings/styles.module.scss"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","interceptors","request","use","config","accessToken","localStorage","getItem","headers","Authorization","profileAPI","get","id","params","profileData","put","authAPI","data","post","res","postsAPI","delete","likedStatus","text","chatAPI","ws","WebSocket","onopen","e","alert","console","log","send","JSON","stringify","initialState","status","error","isInitialized","isAuth","setAppStatusAC","type","setAppErrorAC","setIsInitializedAC","setIsAuthAC","isLoggedIn","loginError","setIsLoggedInAC","value","setErrorAc","errorValue","profile","posts","userId","getUserProfile","payload","filterProfilePostsAC","setPostComments","getProfile","dispatch","getState","a","getProfilePosts","profilePage","limit","offset","response","updateProfile","formData","FormData","append","updateProfileImage","imageData","avatar","toast","initialStateRegistration","isRegistration","setIsLikedStatus","getPosts","getPostsComments","channels","messages","getChannels","reducers","combineReducers","state","action","map","p","comments","filter","f","postsReducer","is_user_liked","likes_count","auth","registration","chat","app","form","formReducer","store","createStore","applyMiddleware","thunk","Sidebar","className","s","sidebar","sidebarList","sidebarItem","activeClassName","activeLink","to","logoIcon","fontSize","sidebarLink","Preloader","preloader","style","backgroundColor","imgWrap","width","height","viewBox","fill","xmlns","d","rx","ry","transform","cx","cy","device_id","Header","useSelector","history","useHistory","useDispatch","header","onClick","push","logo","logoText","headerLogin","Button","variant","removeItem","loginBtn","WithSuspense","Component","props","fallback","toCorrectTime","time","withoutSeconds","currentData","split","currentTime","substring","Comment","firstName","lastName","image","titleStr","comment","commentTop","src","topText","title","content","AddComment","addComment","useState","inputText","setInputText","block","inputWrap","aria-label","placeholder","onChange","currentTarget","sendBtn","topics","label","PostModal","handleClose","isOpen","addPost","editPost","postText","postTopic","children","topic","setTopic","inRef","useRef","file","setFile","formik","useFormik","initialValues","validate","values","errors","onSubmit","create_params","Modal","open","onClose","Box","modalBlock","top","cancelBtn","handleSubmit","textAreaWrap","TextField","textArea","name","handleChange","border","selectWrap","Select","select","target","index","MenuItem","imageInput","newFile","files","ref","btnWrap","changeTopicLabel","topicToChange","ProfilePost","postImage","isLiked","likesCount","changeIsLikedStatus","commentsCount","isPostsPage","setLikedStatus","openComments","setOpenComments","setOpen","currentUserId","Paper","inner","Avatar","alt","IconButton","size","removePost","removeBtn","postImageWrap","bottom","favouriteBlock","favouriteBtn","commentsView","commentBlock","getProfilePostComments","length","c","author","first_name","last_name","url","send_time","addPostComment","addPostData","updatePost","EditProfileModal","editProfile","email","userName","profileInterests","interests","setInterests","username","test","input","color","checkboxWrap","checkboxes","FormControlLabel","checked","includes","control","Checkbox","labelPlacement","findLabelByValue","labels","forEach","Profile","useParams","router","useRouteMatch","useEffect","Container","Card","topContainer","bottomContainer","join","Divider","postsTitle","postsWrap","card","publish_time","comments_count","Login","password_hash","SHA256","toString","setItem","access_token","refresh_token","message","resetForm","loginBlock","r","textBlock","Title","Text","sx","display","alignItems","mr","my","marginLeft","formBtn","redirectBlock","redirectSpan","signBtn","Registration","setTimeout","registerBlock","registerCard","formBlock","Posts","changeLikesStatus","postsBlock","addPostWrap","addImageData","ChangePhotoModal","changeImage","code","base64","setFileURL","file64","setFile64","setFileData","changeImgInput","reader","FileReader","window","URL","createObjectURL","onloadend","result","readAsDataURL","readAsText","disabled","ProfileSettingsCard","setIsOpen","profileCard","imgBlock","applyButton","InfoSettingsCard","infoCard","inputsBlock","InterestsSettingCard","interestsCard","inputLabel","PasswordSettingCard","newPassword","oldPassword","new_password_hash","old_password_hash","success","passwordCard","Settings","settings","ChannelMessages","channelId","chatMessageList","messageImage","addMessageBlock","AddChannelModal","authId","members_ids","createParamsData","Channels","currentMessages","localId","setLocalId","getMessagesHandler","getMessagesById","channelsBlock","chatBlock","chatCardList","chanel","channel","channelName","Routes","path","render","from","App","appWrapper","ReactDOM","document","getElementById"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,UAAY,0BAA0B,QAAU,0B,oBCAhGD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,QAAU,0B,oBCAlED,EAAOC,QAAU,CAAC,WAAa,2BAA2B,MAAQ,wB,yCCAlED,EAAOC,QAAU,CAAC,WAAa,2BAA2B,IAAM,oBAAoB,MAAQ,sBAAsB,UAAY,0BAA0B,QAAU,wBAAwB,KAAO,qBAAqB,SAAW,yBAAyB,MAAQ,sBAAsB,UAAY,0BAA0B,SAAW,yBAAyB,UAAY,0BAA0B,MAAQ,sBAAsB,aAAe,6BAA6B,WAAa,2BAA2B,QAAU,0B,mBCApgBD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,YAAc,4BAA4B,SAAW,yBAAyB,WAAa,6B,mBCA/ID,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,IAAM,oBAAoB,QAAU,wBAAwB,MAAQ,sBAAsB,UAAY,0BAA0B,QAAU,wBAAwB,cAAgB,8BAA8B,UAAY,0BAA0B,MAAQ,sBAAsB,OAAS,uBAAuB,eAAiB,+BAA+B,aAAe,6BAA6B,aAAe,+B,mBCA3eD,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,aAAe,6BAA6B,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,QAAU,wBAAwB,UAAY,0BAA0B,KAAO,qBAAqB,MAAQ,sBAAsB,cAAgB,8BAA8B,QAAU,0B,uECa7XC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,2ECJDQ,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,wCAEbH,EAASI,aAAaC,QAAQC,KAAI,SAAUC,GACxC,IAAMC,EAAcC,aAAaC,QAAQ,gBAEzC,OADAH,EAAOI,QAAQC,cAAgBJ,EAAW,iBAAaA,GAAgB,GAChED,KAGJ,IAAMM,EAAa,WAElB,OAAOb,EAASc,IAAT,UAFFD,EAAa,SAIPE,GACX,OAAOf,EAASc,IAAT,gBAAsBC,KALxBF,EAAa,SAONE,EAAYC,GACxB,OAAOhB,EAASc,IAAT,eAAqBC,EAArB,UAAiC,CACpCC,OAAO,eACAA,MAVNH,EAAa,SAcRI,GACV,OAAOjB,EAASkB,IAAI,eAAgBD,IAf/BJ,EAAa,SAiBPG,GACX,OAAOhB,EAASkB,IAAI,wBAAyBF,IAOxCG,EAAU,SACVC,GACL,OAAOpB,EAASqB,KAAT,gBAAwDD,IAF1DD,EAAU,SAIbC,GACF,OAAOpB,EAASqB,KAAT,aAAkDD,GAAM1B,MAAK,SAAA4B,GAAG,OAAIA,EAAIF,KAAKA,SAL/ED,EAAU,SAOZC,GACH,OAAOpB,EAASqB,KAAT,cAAmED,IARrED,EAAU,WAWf,OAAOnB,EAASc,IAAT,SAIFS,EAAW,SACXP,GACL,OAAOhB,EAASc,IAAqB,QAAS,CAC1CE,OAAO,eACAA,MAJNO,EAAW,SAQTR,GACP,OAAOf,EAASwB,OAAT,gBAA0CT,KAT5CQ,EAAW,SAWAR,EAAYU,GAC5B,OAAOzB,EAASqB,KAAT,gBAAuBN,EAAvB,0BAA2CU,KAZ7CF,EAAW,SAcJR,EAAYC,GACxB,OAAOhB,EAASc,IAAT,gBAAsBC,EAAtB,YAAoC,CACvCC,OAAO,eACAA,MAjBNO,EAAW,SAqBLR,EAAYW,GAEvB,OAAO1B,EAASqB,KAAT,gBAAuBN,EAAvB,YAAqC,CAACW,UAvBxCH,EAAW,SAyBTP,GACP,OAAOhB,EAASqB,KAAK,eAAgBL,IA1BhCO,EAAW,SA4BTR,EAAYC,GACnB,OAAOhB,EAASkB,IAAT,gBAAsBH,GAAMC,IAK9BW,EAAU,WAEf,OAAO3B,EAASc,IAAI,aAFfa,EAAU,SAILX,GACV,OAAOhB,EAASqB,KAAK,kBAAkBL,IALlCW,EAAU,SAODZ,EAAYC,GAC1B,OAAOhB,EAASc,IAAT,mBAAyBC,EAAzB,aAAwC,CAC3CC,OAAO,eACAA,MAVNW,EAAU,SAcIZ,GACnB,IAAMa,EAAK,IAAIC,UAAJ,mDACqCd,EADrC,YAGXa,EAAGE,OAAS,SAAUC,GAClBC,MAAM,0IACNA,MAAM,uJACNC,QAAQC,IAAIH,GACZH,EAAGO,KAAKC,KAAKC,UAAU,CACnBX,KAAM,eC3GhBY,EAAe,CACjBC,OAAQ,YACRC,MAAO,KACPC,eAAe,EACfC,QAAO,GAmBEC,EAAiB,SAACJ,GAAD,MAAgC,CAACK,KAAM,iBAAkBL,WAC1EM,EAAgB,SAACL,GAAD,MAA2B,CAACI,KAAM,gBAAiBJ,UACnEM,EAAqB,SAACL,GAAD,MAA6B,CAACG,KAAM,yBAA0BH,kBACnFM,EAAc,SAACL,GAAD,MAAsB,CAACE,KAAM,kBAAmBF,WCjBrEJ,EAAe,CACjBU,YAAY,EACZC,WAAY,IAeHC,EAAkB,SAACC,GAAD,MAC1B,CAACP,KAAM,yBAA0BO,UACzBC,EAAa,SAACC,GAAD,MAAyB,CAACT,KAAM,kBAAmBS,e,SCtBvEf,EAAe,CACjBgB,QAAS,GACTC,MAAO,GACPC,OAAQ,MA6BCC,EAAiB,SAACC,GAC3B,MAAO,CACHd,KAAM,2BACNc,YASKC,EAAuB,SAAC5C,GACjC,MAAO,CACH6B,KAAM,+BACN7B,OAUF6C,EAAkB,SAAC7C,EAAU2C,GAE/B,MAAO,CACHd,KAAM,2BACN7B,KACA2C,YAKKG,EAAa,yDAAiB,WAAOC,EAAoBC,GAA3B,eAAAC,EAAA,6DACvCF,EAASnB,EAAe,YADe,kBAGjB9B,IAHiB,OAG7BS,EAH6B,OAInCwC,EAASL,EAAenC,EAAIF,KAAKA,OACjC0C,EArBG,CACHlB,KAAM,sBACN7B,GAmBqBO,EAAIF,KAAKA,KAAKL,KAGnC+C,EAASG,EAAgBF,IAAWG,YAAYZ,QAAQvC,GAAI,CAACoD,MAAO,IAAKC,OAAQ,KACjFN,EAASnB,EAAe,cATW,kDAYnCmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WAbW,0DAAjB,yDAyCbsB,EAAkB,SAAClD,EAAYC,GAAb,8CAAoC,WAAO8C,GAAP,eAAAE,EAAA,6DAC/DF,EAASnB,EAAe,YADuC,kBAGzC9B,EAA2BE,EAAIC,GAHU,OAGrDM,EAHqD,OAI3DwC,EAzEG,CACHlB,KAAM,4BACNc,QAuE2BpC,EAAIF,KAAKA,OACpC0C,EAASnB,EAAe,cALmC,gDAO3DmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WARmC,yDAApC,uDAYlB2B,EAAgB,SAACrD,GAAD,8CAAsC,WAAO6C,GAAP,eAAAE,EAAA,6DAC/DF,EAASnB,EAAe,aAClB4B,EAAW,IAAIC,UACZC,OAAO,gBAAiBrC,KAAKC,UAAUpB,IAHe,kBAMrDJ,EAAyB0D,GAN4B,OAQ3DT,EAASD,KACTC,EAASnB,EAAe,cATmC,kDAW3DmB,EAASf,GAAY,IACrBe,EAASZ,GAAgB,IACzBjB,QAAQC,IAAR,MACA4B,EAASnB,EAAe,WAdmC,0DAAtC,uDAkBhB+B,EAAqB,SAACC,GAAD,8CAAoB,WAAOb,GAAP,eAAAE,EAAA,6DAClDF,EAASnB,EAAe,aAClB4B,EAAW,IAAIC,UACZC,OAAO,SAAUE,EAAUC,QAHc,kBAKxC/D,EAAyB0D,GALe,OAO9CT,EAASD,KACTC,EAASnB,EAAe,cARsB,kDAY9CV,QAAQC,IAAR,MACA2C,IAAMrC,MAAM,kGACZsB,EAASnB,EAAe,WAdsB,0DAApB,uD,kBC9I5BmC,EAA6C,CAC/CC,gBAAgB,EAChBvC,MAAO,ICCLF,GAAe,CACjBiB,MAAO,IA4BJyB,GAAmB,SAACjE,EAAUU,GACjC,MAAO,CACHmB,KAAM,4BACN7B,KAAGU,gBAGLmC,GAAkB,SAAC7C,EAAU2C,GAC/B,MAAO,CACHd,KAAM,yBACN7B,KACA2C,YAKKuB,GAAW,SAACjE,GAAD,8CAAuB,WAAO8C,GAAP,eAAAE,EAAA,6DAC3CF,EAASnB,EAAe,YADmB,kBAGtBpB,EAAkBP,GAHI,OAGjCM,EAHiC,OAIvCwC,EAxBG,CACHlB,KAAM,kBACNc,QAsBkBpC,EAAIF,KAAKA,OAC3B0C,EAASnB,EAAe,cALe,gDAOvCmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WARe,yDAAvB,uDAiCXuC,GAAmB,SAACnE,EAAUC,GAAX,8CAAiC,WAAO8C,GAAP,eAAAE,EAAA,+EAGxCzC,EAAyBR,EAAGC,GAHY,OAGnDM,EAHmD,OAIzDwC,EAASF,GAAgB7C,EAAGO,EAAIF,KAAKA,OAJoB,gDAOzD0C,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WARiC,yDAAjC,uDC/E1BL,GAAe,CACjB6C,SAAU,GACVC,SAAS,IA8BAC,GAAc,yDAAM,WAAOvB,GAAP,eAAAE,EAAA,6DAC7BF,EAASnB,EAAe,YADK,kBAGPhB,IAHO,OAGnBL,EAHmB,OAIzBW,QAAQC,IAAIZ,EAAIF,KAAKA,MACrB0C,EAlBG,CACHlB,KAAM,wBACNc,QAgBqBpC,EAAIF,KAAKA,OAC9B0C,EAASnB,EAAe,cANC,kDAQzBmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WATC,0DAAN,uDC7BvB2C,GAAWC,YAAgB,CAC3BrB,YJK0B,WAAoF,IAAnFsB,EAAkF,uDAAxDlD,EAAcmD,EAA0C,uCAC7G,OAAQA,EAAO7C,MACX,IAAK,2BACD,OAAO,2BAAI4C,GAAX,IAAkBlC,QAASmC,EAAO/B,UAEtC,IAAK,4BACD,OAAO,2BAAI8B,GAAX,IAAkBjC,MAAOkC,EAAO/B,UAEpC,IAAK,2BAED,OAAO,2BAAI8B,GAAX,IAAkBjC,MAAOiC,EAAMjC,MAAMmC,KAAI,SAAAC,GAAC,OAAEA,EAAE5E,KAAK0E,EAAO1E,GAAd,2BAAuB4E,GAAvB,IAAyBC,SAASH,EAAO/B,UAAWiC,OAEpG,IAAK,+BAED,OAAO,2BAAIH,GAAX,IAAkBjC,MAAOiC,EAAMjC,MAAMsC,QAAO,SAAAC,GAAC,OAAEA,EAAE/E,KAAK0E,EAAO1E,QAEjE,IAAK,sBACD,OAAO,2BAAIyE,GAAX,IAAkBhC,OAAQiC,EAAO1E,KAGrC,QACI,OAAOyE,IIzBfO,aFEwB,WAAoF,IAAnFP,EAAkF,uDAAxDlD,GAAcmD,EAA0C,uCAC3G,OAAQA,EAAO7C,MACX,IAAK,kBACD,OAAO,2BAAI4C,GAAX,IAAkBjC,MAAOkC,EAAO/B,UAEpC,IAAK,4BACD,OAAO,2BAAI8B,GAAX,IAAkBjC,MAAOiC,EAAMjC,MAAMmC,KAAI,SAAAC,GAAC,OAAEA,EAAE5E,KAAK0E,EAAO1E,GAAd,2BAAuB4E,GAAvB,IAAyBK,cAAcP,EAAOhE,YAAYwE,YAAYR,EAAOhE,YAAckE,EAAEM,YAAY,EAAIN,EAAEM,YAAY,IAAKN,OAEhL,IAAK,yBACD,OAAO,2BAAIH,GAAX,IAAkBjC,MAAOiC,EAAMjC,MAAMmC,KAAI,SAAAC,GAAC,OAAEA,EAAE5E,KAAK0E,EAAO1E,GAAd,2BAAuB4E,GAAvB,IAAyBC,SAASH,EAAO/B,UAAWiC,OAGpG,QACI,OAAOH,IEdfU,KLKuB,WAAoF,IAAnFV,EAAkF,uDAAxDlD,EAAcmD,EAA0C,uCAC1G,OAAQA,EAAO7C,MACX,IAAK,yBACD,OAAO,2BAAI4C,GAAX,IAAkBxC,WAAYyC,EAAOtC,QACzC,IAAK,kBACD,OAAO,2BAAIqC,GAAX,IAAkBvC,WAAYwC,EAAOpC,aACzC,QACI,OAAOmC,IKXfW,aHH+B,WAAgG,IAA/FX,EAA8F,uDAApEV,EAA0BW,EAA0C,uCAC9H,OAAQA,EAAO7C,MACX,IAAK,gCACD,OAAO,2BAAI4C,GAAX,IAAkBT,eAAgBU,EAAOV,eAAgBvC,MAAO,KACpE,IAAK,yBACD,OAAO,2BAAIgD,GAAX,IAAkBhD,MAAOiD,EAAOtC,QACpC,QACI,OAAOqC,IGHfY,KDHuB,WAAoF,IAAnFZ,EAAkF,uDAAxDlD,GAAcmD,EAA0C,uCAC1G,OAAQA,EAAO7C,MACX,IAAK,wBACD,OAAO,2BAAK4C,GAAZ,IAAmBL,SAAUM,EAAO/B,UACxC,IAAK,gCACD,OAAO,2BAAI8B,GAAX,IAAkBJ,SAAUK,EAAO/B,UAEvC,QACI,OAAO8B,ICJfa,INLsB,WAA6F,IAA5Fb,EAA2F,uDAA9DlD,EAAcmD,EAAgD,uCAClH,OAAQA,EAAO7C,MACX,IAAK,iBACD,OAAO,2BAAI4C,GAAX,IAAkBjD,OAAQkD,EAAOlD,SACrC,IAAK,gBACD,OAAO,2BAAIiD,GAAX,IAAkBhD,MAAOiD,EAAOjD,QACpC,IAAK,yBACD,OAAO,2BAAIgD,GAAX,IAAkB/C,cAAegD,EAAOhD,gBAC5C,IAAK,kBACD,OAAO,2BAAI+C,GAAX,IAAkB9C,OAAQ+C,EAAO/C,SACrC,QACI,OAAO8C,IMLfc,KAAMC,MASKC,GALIC,YAAYnB,GAAUoB,YAAgBC,M,kICuC1CC,GArDC,WACd,OACE,sBAAKC,UAAWC,KAAEC,QAAlB,SACE,sBAAIF,UAAWC,KAAEE,YAAjB,UACE,sBAAIH,UAAWC,KAAEG,YAAjB,UACE,eAAC,KAAD,CAASC,gBAAiBJ,KAAEK,WAAYC,GAAG,WAA3C,SACE,eAAC,KAAD,CACEP,UAAWC,KAAEO,SACbC,SAAU,YAEH,OAEb,sBAAIT,UAAWC,KAAEG,YAAjB,UACE,eAAC,KAAD,CACEJ,UAAWC,KAAES,YACbL,gBAAiBJ,KAAEK,WACnBC,GAAG,SAHL,SAKE,eAAC,KAAD,CACEP,UAAWC,KAAEO,SACbC,SAAU,YAEH,OAEb,sBAAIT,UAAWC,KAAEG,YAAjB,UACE,eAAC,KAAD,CACEJ,UAAWC,KAAES,YACbL,gBAAiBJ,KAAEK,WACnBC,GAAG,YAHL,SAKE,eAAC,KAAD,CACEP,UAAWC,KAAEO,SACbC,SAAU,YAEH,OAEb,sBAAIT,UAAWC,KAAEG,YAAjB,UACE,eAAC,KAAD,CACEJ,UAAWC,KAAES,YACbL,gBAAiBJ,KAAEK,WACnBC,GAAG,YAHL,SAKE,eAAC,KAAD,CACEP,UAAWC,KAAEO,SACbC,SAAU,YAEH,a,qBCjDRE,GAAY,WACrB,OACI,sBAAKX,UAAWC,KAAEW,UAAWC,MAAO,CAACC,gBAAiB,SAAtD,SACI,sBAAKd,UAAWC,KAAEc,QAAlB,SACI,uBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAAlE,UACI,uBAAMC,EAAE,kKAAkKF,KAAK,UAC/K,uBAAME,EAAE,iKAAiKF,KAAK,UAC9K,uBAAME,EAAE,oKAAoKF,KAAK,UACjL,0BAASG,GAAG,UAAUC,GAAG,UAAUC,UAAU,+DAA+DL,KAAK,UACjH,0BAASM,GAAG,UAAUC,GAAG,UAAUJ,GAAG,UAAUC,GAAG,SAASJ,KAAK,UACjE,0BAASM,GAAG,SAASC,GAAG,UAAUJ,GAAG,UAAUC,GAAG,SAASJ,KAAK,kB,uCCXvEQ,GAAW,SCsFTC,OA/Ef,WACE,IAAM/F,EAASgG,cAAkC,SAAClD,GAAD,OAAWA,EAAMa,IAAI3D,UAChEiG,EAAUC,eACV9E,EAAW+E,eAKjB,OACE,0BAAQhC,UAAWC,KAAEgC,OAArB,UACE,uBACEC,QAAS,WACPJ,EAAQK,KAAK,aAEfnC,UAAWC,KAAEmC,KAJf,UAME,uBACEpB,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,6BALR,UAOE,uBACEC,EAAE,kKACFF,KAAK,UAEP,uBACEE,EAAE,iKACFF,KAAK,UAEP,uBACEE,EAAE,oKACFF,KAAK,UAEP,0BACEG,GAAG,UACHC,GAAG,UACHC,UAAU,+DACVL,KAAK,UAEP,0BACEM,GAAG,UACHC,GAAG,UACHJ,GAAG,UACHC,GAAG,SACHJ,KAAK,UAEP,0BACEM,GAAG,SACHC,GAAG,UACHJ,GAAG,UACHC,GAAG,SACHJ,KAAK,aAIT,uBAAMnB,UAAWC,KAAEoC,SAAnB,sBAGF,sBAAKrC,UAAWC,KAAEqC,YAAlB,SACGzG,EACC,+BACE,eAAC0G,GAAA,EAAD,CACEC,QAAS,WACTN,QA7DU,WT0DF,IAAC3H,ESzDnB0C,GTyDmB1C,ESzDH,CAAEoH,UAAWA,ITyDX,uCAA4B,WAAO1E,GAAP,eAAAE,EAAA,6DAC9CF,EAASnB,EAAe,YADsB,kBAG1BxB,EAAeC,GAHW,OAGtCE,EAHsC,OAI1CW,QAAQC,IAAIZ,GACZwC,EAASZ,GAAgB,IACzBY,EAASf,GAAY,IACrBe,EAASnB,EAAe,cACxBlC,aAAa6I,WAAW,gBACxB7I,aAAa6I,WAAW,iBATkB,kDAW1CxF,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WAZkB,0DAA5B,wDSxDlBgG,EAAQK,KAAK,WA4DHnC,UAAWC,KAAEyC,SAHf,8CASF,eAAC,KAAD,CAASnC,GAAI,SAAb,4CC9EGoC,GAAe,SAACC,GACzB,OAAO,SAACC,GACJ,OAAO,eAAC,WAAD,CAAUC,SAAU,8CAApB,SACC,eAACF,EAAD,eAAeC,Q,oECPhB,OAA0B,mC,4FCA5BE,GAAgB,SAACC,EAAcC,GACxC,IAAIC,EAAcF,EAAKG,MAAM,KAAK,GAC9BC,EAAcJ,EAAKG,MAAM,KAAK,GAAGA,MAAM,KAAK,GAIhD,OAHIF,IACAG,EAAcA,EAAYC,UAAU,EAAG,IAErC,GAAN,OAAUH,EAAV,YAAyBE,ICKhBE,GAAmB,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,UAAUC,EAA4B,EAA5BA,SAASC,EAAmB,EAAnBA,MAAMT,EAAa,EAAbA,KAAKnI,EAAQ,EAARA,KAEtD6I,EAAUH,GAAaC,EAAb,UAA2BD,EAA3B,YAAwCC,GAAa,oDAErE,OACI,uBAAKxD,UAAWC,KAAE0D,QAAlB,UACI,uBAAK3D,UAAWC,KAAE2D,WAAlB,UACI,sBAAKC,IAAKJ,IACV,uBAAKzD,UAAWC,KAAE6D,QAAlB,UACI,qBAAI9D,UAAWC,KAAE8D,MAAjB,SAAyBL,IACzB,sBAAK1D,UAAWC,KAAE+C,KAAlB,SAAyBD,GAAcC,GAAK,WAIpD,sBAAKhD,UAAWC,KAAE+D,QAAlB,SAA4BnJ,Q,qBCjB3BoJ,GAAuB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,WAAc,EAEjBC,mBAAS,IAFQ,oBAEzCC,EAFyC,KAE/BC,EAF+B,KAShD,OACI,uBAAKrE,UAAWC,KAAEqE,MAAlB,UACI,sJACA,sBAAKtE,UAAWC,KAAEsE,UAAlB,SACI,2BACIC,aAAW,iBACXC,YAAa,gHACbC,SAAU,SAACxJ,GAAD,OAAKmJ,EAAanJ,EAAEyJ,cAAcrI,QAC5CA,MAAO8H,MAGf,eAAC7B,GAAA,EAAD,CAAQC,QAAS,YAAaxC,UAAWC,KAAE2E,QAAS1C,QAhBtC,WAClBgC,EAAWE,GACXC,EAAa,KAcT,wE,mGC5BCQ,GAAkB,CAC3B,CACIvI,MAAO,kBACPwI,MAAO,OAEX,CACIxI,MAAO,eACPwI,MAAO,gBAEX,CACIxI,MAAO,sBACPwI,MAAO,WAEX,CACIxI,MAAO,kBACPwI,MAAO,OAEX,CACIxI,MAAO,qBACPwI,MAAO,MAEX,CACIxI,MAAO,SACPwI,MAAO,UCSFC,GAAwB,SAAC,GASO,IARHhB,EAQE,EARFA,MACAiB,EAOE,EAPFA,YACAC,EAME,EANFA,OACAC,EAKE,EALFA,QACAC,EAIE,EAJFA,SACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,UACAC,EACE,EADFA,SACE,EACdnB,mBAAS,IADK,oBACjCoB,EADiC,KAC1BC,EAD0B,KAElCC,EAAQC,iBAAyB,MAFC,EAGhBvB,qBAHgB,oBAGjCwB,EAHiC,KAG3BC,EAH2B,KAelCC,EAASC,aAAU,CACrBC,cAAe,CACXlL,KAAMuK,GAAsB,GAC5BG,MAAOF,GAAwB,IAEnCW,SAAU,SAACC,GACP,IAAIC,EAA0C,GAO9C,OANKD,EAAOV,QACRW,EAAOX,MAAQ,YAEdU,EAAOpL,OACRqL,EAAOrL,KAAO,YAEXqL,GAEXC,SAAU,SAACF,GAEHf,GACAA,EAAQ,CACJkB,cAAe,CACXvL,KAAMoL,EAAOpL,KACb0K,MAAOU,EAAOV,OAElB9B,MAAOkC,IAGXR,GACAA,EAAS,CACLiB,cAAe,CACXvL,KAAMoL,EAAOpL,KACb0K,MAAOU,EAAOV,SAM1BP,OAGR,OACI,eAACqB,GAAA,EAAD,CAAOC,KAAMrB,EAAQsB,QAASvB,EAA9B,SACI,gBAACwB,GAAA,EAAD,CAAKxG,UAAWC,KAAEwG,WAAlB,UACI,sBAAKzG,UAAWC,KAAEyG,IAAlB,SACI,sBAAI1G,UAAWC,KAAE8D,MAAjB,UACKA,EACD,yBACI/D,UAAWC,KAAE0G,UACbzE,QAAS,WACL8C,KAHR,SAMI,sBACIhE,MAAM,KACNG,KAAM,MACNF,OAAO,KACPC,QAAQ,YACRE,MAAM,6BALV,SAOI,uBAAMC,EAAE,mHAKxB,sBAAKrB,UAAWC,KAAE+D,QAAlB,SACKsB,GAGG,wBAAMa,SAAUN,EAAOe,aAAc5G,UAAWC,KAAER,KAAlD,UACI,uBAAKO,UAAWC,KAAE4G,aAAlB,UACI,2IACA,eAACC,GAAA,EAAD,CACI9G,UAAWC,KAAE8G,SACbtC,YAAa,4EACbuC,KAAK,OACLjL,KAAK,OACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAOpL,KACrBgG,MAAOgF,EAAOK,OAAOrL,KAAO,CAACqM,OAAO,iBAAmB,QAI/D,uBAAKlH,UAAWC,KAAEkH,WAAlB,UACI,8HACA,eAACC,GAAA,EAAD,CACIpH,UAAWC,KAAEoH,OACb5C,YAAa,8FACbnI,MAAOiJ,EACPyB,KAAK,QACLnG,MAAOgF,EAAOK,OAAOX,MAAQ,CAAC2B,OAAO,iBAAmB,GACxDxC,SAAU,SAACxJ,GA5FvCsK,EA6F6CtK,EA7F9BoM,OAAOhL,OA8FUuJ,EAAOoB,aAAa/L,IAR5B,SAWK2J,GAAOhG,KAAI,SAAC0G,EAAOgC,GAChB,OACI,eAACC,GAAA,EAAD,CAAUlL,MAAOiJ,EAAMjJ,MAAvB,SACKiJ,EAAMT,OADwByC,WAOnD,sBAAKvH,UAAWC,KAAEsE,UAAlB,SACI,eAACuC,GAAA,EAAD,CACI9G,UAAWC,KAAEwH,WACb1L,KAAK,OACLiL,KAAK,QACLtC,SAtHjB,SAACxJ,GACZ,IAAMwM,EAAUxM,EAAEoM,OAAOK,OAASzM,EAAEoM,OAAOK,MAAM,GAC7CD,GACA9B,EAAQ8B,IAoHgBE,IAAKnC,MAGb,sBAAKzF,UAAWC,KAAE4H,QAAlB,SACI,eAACtF,GAAA,EAAD,CAAQC,QAAS,YAAazG,KAAK,SAAnC,iF,0CCzKnB+L,GAAkB,SAACC,GAC5B,IAAIjD,EAAM,GACX,OAAQiD,GACJ,IAAK,kBACDjD,EAAM,MACN,MAEJ,IAAK,eACDA,EAAM,eACN,MAEJ,IAAK,sBACDA,EAAM,UACN,MAEJ,IAAK,kBACDA,EAAM,MACN,MAEJ,IAAK,qBACDA,EAAM,KACN,MAEJ,IAAK,SACDA,EAAM,QACN,MAEJ,QACIA,EAAMiD,EAIb,OAAOjD,GCYEkD,GAA0B,SAAC,GAgBjC,IAfLzE,EAeI,EAfJA,UACAC,EAcI,EAdJA,SACAC,EAaI,EAbJA,MACA5I,EAYI,EAZJA,KACAoN,EAWI,EAXJA,UACA1C,EAUI,EAVJA,MACAvC,EASI,EATJA,KACAkF,EAQI,EARJA,QACAC,EAOI,EAPJA,WACAC,EAMI,EANJA,oBACAlO,EAKI,EALJA,GACAmO,EAII,EAJJA,cACAtJ,EAGI,EAHJA,SACAuJ,EAEI,EAFJA,YACA3L,EACI,EADJA,OACI,EACkCwH,mBAAS+D,GAD3C,oBACGtN,EADH,KACgB2N,EADhB,OAEoCpE,oBAAS,GAF7C,oBAEGqE,EAFH,KAEiBC,EAFjB,OAGoBtE,oBAAS,GAH7B,oBAGGmC,EAHH,KAGSoC,EAHT,KAIEC,EAAgB9G,cACpB,SAAClD,GAAD,OAAWA,EAAMtB,YAAYV,UAEzBM,EAAW+E,eA2BjB,OACE,gBAAC4G,GAAA,EAAD,CAAO5I,UAAWC,KAAEzF,KAApB,UACE,uBAAKwF,UAAWC,KAAE4I,MAAlB,UACE,uBAAK7I,UAAWC,KAAEyG,IAAlB,UACG4B,EACC,gBAAC,KAAD,CAAS/H,GAAE,kBAAa5D,GAAxB,UACE,sBAAKkH,IAAKJ,GAAgBqF,GAAQC,IAAI,cAAc,OAGtD,sBAAKlF,IAAKJ,GAAgBqF,GAAQC,IAAI,cAExC,uBAAK/I,UAAWC,KAAE6D,QAAlB,UACE,sBAAI9D,UAAWC,KAAE8D,MAAjB,UACGuE,EACC,gBAAC,KAAD,CAAS/H,GAAE,kBAAa5D,GAAxB,UACE,kCACG4G,EADH,IACeC,KACP,OAGV,kCACGD,EADH,IACeC,KAGf7G,IAAWgM,GACX,eAACK,GAAA,EAAD,CAAY9G,QAAS,kBAAMwG,GAAQ,IAAnC,SACE,eAAC,KAAD,MAGF/L,IAAWgM,GACX,eAACK,GAAA,EAAD,CACEC,KAAK,QACL/G,QAxCQ,WACtBjF,EfvBsB,SAAC/C,GAAD,8CAAe,WAAO+C,EAAmBC,GAA1B,SAAAC,EAAA,6DACrCF,EAASnB,EAAe,YADa,kBAG3BpB,EAAoBR,GAHO,OAKjC+C,EAASmB,GAAS,CAACd,MAAO,GAAIC,OAAQ,KACtCN,EAASH,EAAqB5C,IAC9B+C,EAASnB,EAAe,cAPS,gDASjCmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WAVS,yDAAf,wDeuBboN,CAAWhP,KAwCN8F,UAAWC,KAAEkJ,UAHf,SAKE,eAAC,KAAD,SAIN,sBAAKnJ,UAAWC,KAAE+C,KAAlB,SAAyBD,GAAcC,GAAM,KAC7C,uBAAMhD,UAAWC,KAAEsF,MAAnB,SAA2BuC,GAAiBvC,WAGhD,uBAAKvF,UAAWC,KAAE+D,QAAlB,UACE,oBAAGhE,UAAWC,KAAEpF,KAAhB,SAAuBA,IACtBoN,GACC,sBAAKjI,UAAWC,KAAEmJ,cAAlB,SACE,sBAAKpJ,UAAWC,KAAEgI,UAAWpE,IAAKoE,EAAWc,IAAI,sBAKzD,uBAAK/I,UAAWC,KAAEoJ,OAAlB,UACE,uBAAKrJ,UAAWC,KAAEqJ,eAAlB,UACE,eAACN,GAAA,EAAD,CAAY9G,QA/EQ,WAC1BqG,GAAgB3N,GAChBwN,EAAoBlO,GAAKU,IA6EuBoF,UAAWC,KAAEsJ,aAAvD,SACG3O,EAAc,eAAC,KAAD,IAAmB,eAAC,KAAD,MAEnCuN,EAAa,EAAI,+BAAMA,IAAoB,MAE9C,uBAAKnI,UAAWC,KAAEuJ,aAAlB,UACE,eAAC,KAAD,CACExJ,UAAWC,KAAEwJ,aACbvH,QAnFiB,WACzBuG,GAAiBD,GACbF,GACFrL,EAASoB,GAAiBnE,EAAI,CAAEoD,MAAO,IAAKC,OAAQ,KAEjD+K,GACHrL,EjBcgC,SAAC/C,EAAUC,GAAX,8CAAiC,WAAO8C,GAAP,eAAAE,EAAA,+EAG9CzC,EAAyBR,EAAGC,GAHkB,OAGzDM,EAHyD,OAI/DwC,EAASF,EAAgB7C,EAAGO,EAAIF,KAAKA,OAJ0B,gDAO/D0C,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WARuC,yDAAjC,sDiBdvB4N,CAAuBxP,EAAI,CAAEoD,MAAO,IAAKC,OAAQ,QA+EtD,gCAAO8K,EAAgB,EAAI,+BAAMA,IAAuB,WAG3DG,EACC,iCACGzJ,GAAYA,EAAS4K,OAAS,EAC3B5K,EAASF,KAAI,SAAC+K,EAAGrC,GAAW,IAAD,QACzB,OACE,eAAC,GAAD,CACEhE,UAAS,OAAEqG,QAAF,IAAEA,GAAF,UAAEA,EAAGC,cAAL,aAAE,EAAWC,WACtBtG,SAAQ,OAAEoG,QAAF,IAAEA,GAAF,UAAEA,EAAGC,cAAL,aAAE,EAAWE,UACrBtG,MAAK,OAAEmG,QAAF,IAAEA,GAAF,UAAEA,EAAGC,cAAL,iBAAE,EAAW9L,cAAb,aAAE,EAAmBiM,IAC1BhH,KAAI,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAGK,UACTpP,KAAI,OAAE+O,QAAF,IAAEA,OAAF,EAAEA,EAAG/O,UAIf,GACJ,eAAC,GAAD,CAAYqJ,WA9FD,SAACrJ,GAElBoC,Efa0B,SAAC/C,EAAUW,GAAX,8CAAsC,WAAOoC,EAAmBC,GAA1B,SAAAC,EAAA,6DAChEF,EAASnB,EAAe,YADwC,kBAGtDpB,EAAwBR,EAAGW,GAH2B,OAK5DoC,EAASoB,GAAiBnE,EAAG,CAACoD,MAAO,GAAIC,OAAQ,KACjDN,EAASnB,EAAe,cANoC,gDAQ5DmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WAToC,yDAAtC,wDebjBoO,CAAehQ,EAAIW,UA+FxB,GAGF,eAAC,GAAD,CACEkJ,MAAO,0GACPiB,YA/Fc,kBAAM0D,GAAQ,IAgG5BzD,OAAQqB,EACRnB,SA/FkB,SAAChL,GACvB8C,EfyCsB,SAAC/C,EAAUC,GAAX,8CAA+C,WAAO8C,GAAP,iBAAAE,EAAA,6DACrEF,EAASnB,EAAe,YAClBqO,EAAc,CAChBtP,KAAMV,EAAOiM,cAAcvL,KAC3B0K,MAAOpL,EAAOiM,cAAcb,QAE1B7H,EAAU,IAAIC,UACXC,OAAO,gBAAgBrC,KAAKC,UAAU2O,IAPsB,kBAS3DzP,EAAoBR,EAAGwD,GAToC,OAWjET,EAASmB,GAAS,CAACd,MAAO,GAAIC,OAAQ,KACtCN,EAASnB,EAAe,cAZyC,kDAcjEmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WAfyC,0DAA/C,sDezCbsO,CAAWlQ,EAAIC,KA+FpBiL,SAAUvK,EACVwK,UAAWE,Q,iDChKN8E,GAA+B,SAAC,GASO,IARHtG,EAQE,EARFA,MACAiB,EAOE,EAPFA,YACAC,EAME,EANFA,OACAqF,EAKE,EALFA,YACAC,EAIE,EAJFA,MACA/G,EAGE,EAHFA,SACAD,EAEE,EAFFA,UACAiH,EACE,EADFA,SAAUC,EACR,EADQA,iBACR,EACbtG,mBAAmBsG,GADN,oBACxCC,EADwC,KAC7BC,EAD6B,KAGzC9E,EAASC,aAAU,CACrBC,cAAe,CACX6E,SAAUJ,EACVD,MAAOA,EACPT,WAAYvG,EACZwG,UAAWvG,GAEfwC,SAAU,SAACC,GACP,IAAIC,EAA0C,GAe9C,OAdKD,EAAO2E,WACR1E,EAAO0E,SAAW,mFAEjB3E,EAAO6D,aACR5D,EAAO4D,WAAa,mFAEnB7D,EAAO8D,YACR7D,EAAO6D,UAAY,mFAElB9D,EAAOsE,MAEA,4CAA4CM,KAAK5E,EAAOsE,SAChErE,EAAOqE,MAAQ,iHAFfrE,EAAOqE,MAAQ,kFAIZrE,GAEXC,SAAU,SAAAF,GACFqE,GACAA,EAAY,CACRM,SAAU3E,EAAO2E,SACjBL,MAAOtE,EAAOsE,MACdT,WAAY7D,EAAO6D,WACnBC,UAAW9D,EAAO8D,UAClBW,UAAWA,IAGnB1F,OAGR,OACI,eAACqB,GAAA,EAAD,CAAOC,KAAMrB,EAAQsB,QAASvB,EAA9B,SACI,gBAACwB,GAAA,EAAD,CAAKxG,UAAWC,KAAEwG,WAAlB,UACI,sBAAKzG,UAAWC,KAAEyG,IAAlB,SACI,sBAAI1G,UAAWC,KAAE8D,MAAjB,UAAyBA,EACrB,yBAAQ/D,UAAWC,KAAE0G,UAAWzE,QAAS,WACrC8C,KADJ,SAGI,sBAAKhE,MAAM,KAAKG,KAAM,MAAOF,OAAO,KAAKC,QAAQ,YAC5CE,MAAM,6BADX,SAEI,uBACIC,EAAE,mHAOtB,sBAAKrB,UAAWC,KAAE+D,QAAlB,SACI,wBAAMmC,SAAUN,EAAOe,aAAc5G,UAAWC,KAAER,KAAlD,UACI,uBAAKO,UAAS,UAAKC,KAAEsE,UAAP,YAAoBtE,KAAEuK,UAApC,UACI,6EACA,eAAC1D,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACbrG,YAAa,wFACbuC,KAAK,WACLjL,KAAK,OACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAO2E,SACrB/J,MAAOgF,EAAOK,OAAO0E,SAAW,CAAC1D,OAAO,iBAAmB,KAG9DrB,EAAOK,OAAO0E,UAAY,uBAAM/J,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAO0E,cAE1E,uBAAK5K,UAAS,UAAKC,KAAEsE,UAAP,YAAoBtE,KAAEsK,OAApC,UACI,iEACA,eAACzD,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACbrG,YAAa,mDACbuC,KAAK,QACLjL,KAAK,QACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAOsE,MACrB1J,MAAOgF,EAAOK,OAAOqE,MAAQ,CAACrD,OAAO,iBAAmB,KAE3DrB,EAAOK,OAAOqE,OAAS,uBAAM1J,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAOqE,WAGvE,uBAAKvK,UAAS,UAAKC,KAAEsE,UAAP,YAAoBtE,KAAEsD,WAApC,UACI,qDACA,eAACuD,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACbrG,YAAa,gEACbuC,KAAK,aACLjL,KAAK,OACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAO6D,WACrBjJ,MAAOgF,EAAOK,OAAO4D,WAAa,CAAC5C,OAAO,iBAAmB,KAEhErB,EAAOK,OAAO4D,YAAc,uBAAMjJ,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAO4D,gBAG5E,uBAAK9J,UAAS,UAAKC,KAAEsE,UAAP,YAAoBtE,KAAEuD,UAApC,UACI,6EACA,eAACsD,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACbrG,YAAa,wFACbuC,KAAK,YACLjL,KAAK,OACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAO8D,UACrBlJ,MAAOgF,EAAOK,OAAO6D,UAAY,CAAC7C,OAAO,iBAAmB,KAG/DrB,EAAOK,OAAO6D,WAAa,uBAAMlJ,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAO6D,eAG3E,uBAAK/J,UAAWC,KAAE+K,aAAlB,UACI,oIACA,sBAAKhL,UAAWC,KAAEgL,WAAlB,SAEQpG,GAAOhG,KAAI,SAAC0G,EAAOgC,GACf,OACI,eAAC2D,GAAA,EAAD,CACI5O,MAAOiJ,EAAMjJ,MACb6O,QAAST,GAAaA,EAAUU,SAAS7F,EAAMjJ,OAC/C+O,QAAS,eAACC,GAAA,EAAD,CACL5G,SAAU,SAACxJ,GACHA,EAAEyJ,cAAcwG,SAChBR,EAAa,GAAD,oBAAKD,GAAL,CAAenF,EAAMjJ,SACjClB,QAAQC,IAAIqP,KAEZC,EAAaD,EAAU1L,QAAO,SAAAC,GAAC,OAAEA,IAAIsG,EAAMjJ,UAC3ClB,QAAQC,IAAIqP,OAGxB5F,MAAOS,EAAMT,MACbyG,eAAe,gBASvC,sBAAKvL,UAAWC,KAAE4H,QAAlB,SACI,eAACtF,GAAA,EAAD,CAAQC,QAAS,YAAazG,KAAK,SAAnC,iFCzLfyP,GAAmB,SAACvF,GAC7B,IAAMwF,EAAS,GAEf,OAAIxF,GACAA,EAAOyF,SAAQ,SAAAnG,GACX,OAAQA,GACJ,IAAK,kBACDkG,EAAOtJ,KAAK,OACZ,MAEJ,IAAK,eACDsJ,EAAOtJ,KAAK,gBACZ,MAEJ,IAAK,sBACDsJ,EAAOtJ,KAAK,WACZ,MAEJ,IAAK,kBACDsJ,EAAOtJ,KAAK,OACZ,MAEJ,IAAK,qBACDsJ,EAAOtJ,KAAK,MACZ,MAEJ,IAAK,SACDsJ,EAAOtJ,KAAK,aAQrBsJ,GADO,CAAC,KCgHJE,GA1HwB,WAAO,IAAD,EACrC1O,EAAW+E,eACXvF,EAAUoF,cACd,SAAClD,GAAD,OAAWA,EAAMtB,YAAYZ,WAEzBC,EAAQmF,cACZ,SAAClD,GAAD,OAAWA,EAAMtB,YAAYX,SAEzBb,EAASgG,cAAkC,SAAClD,GAAD,OAAWA,EAAMa,IAAI3D,UAChEiG,EAAUC,eACRpF,EAAWiP,eAAXjP,OAVmC,GAWrBkF,cACpB,SAAClD,GAAD,OAAWA,EAAMtB,YAAYV,UAEPwH,oBAAS,IAdU,oBAcpCmC,EAdoC,KAc9BoC,EAd8B,KAerChN,EAASmG,cACb,SAAClD,GAAD,OAAWA,EAAMa,IAAI9D,UAEjBmQ,EAASC,eAEf1Q,QAAQC,IAAIwQ,EAAO7B,KACnB+B,qBAAU,WpB2DkB,IAAC7R,EoBvDvByC,GACFM,GpBsDyB/C,EoBtDDyC,EpBsDA,uCAAgB,WAAOM,GAAP,eAAAE,EAAA,6DAC1CF,EAASnB,EAAe,YADkB,kBAIpB9B,EAA0BE,GAJN,OAIhCO,EAJgC,OAMtCwC,EAASG,EAAgBlD,EAAI,CAACoD,MAAO,IAAKC,OAAQ,KAClDN,EAASL,EAAenC,EAAIF,KAAKA,OACjC0C,EAASnB,EAAe,cARc,kDAUtCmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WAXc,0DAAhB,wDoBpDP,aAAf+P,EAAO7B,MACT/M,EAASD,KACT5B,QAAQC,IAAI,aAEb,CAACwQ,EAAO7B,MAENnO,GACHiG,EAAQK,KAAK,UAQf,MAAe,YAAXzG,EACK,eAAC,GAAD,IAGP,wBAAMsE,UAAWC,KAAExD,QAAnB,UACE,gBAACuP,GAAA,EAAD,WACE,gBAACC,GAAA,EAAD,CAAMjM,UAAWC,KAAE4I,MAAnB,UACE,sBAAK7I,UAAWC,KAAEyG,IAAlB,SACE,sBAAK1G,UAAWC,KAAEiM,aAAlB,SACE,sBACErI,KAAY,OAAPpH,QAAO,IAAPA,GAAA,UAAAA,EAASsB,cAAT,eAAiBiM,KAAMvN,EAAQsB,OAAOiM,IAAMlB,GACjDC,IAAI,kBAIV,sBAAK/I,UAAWC,KAAEoJ,OAAlB,SACE,uBAAKrJ,UAAWC,KAAEkM,gBAAlB,UACE,sBAAInM,UAAWC,KAAE8D,MAAjB,UACE,kCACGtH,EAAQqN,WADX,IACwBrN,EAAQsN,cAE9BpN,GACA,eAACqM,GAAA,EAAD,CAAY9G,QAAS,kBAAMwG,GAAQ,IAAnC,SACE,eAAC,KAAD,SAIN,wBAAM1I,UAAWC,KAAE8D,MAAnB,cAA4BtH,EAAQmO,iBAGxC,uBAAK5K,UAAWC,KAAEyK,UAAlB,UACE,sFAAuB,IACtBc,GAAiB/O,EAAQiO,WAAW0B,KAAK,YAG9C,eAACC,GAAA,EAAD,IACA,uBAAKrM,UAAWC,KAAEvD,MAAlB,UACE,qBAAIsD,UAAWC,KAAEqM,WAAjB,4CACA,sBAAKtM,UAAWC,KAAEsM,UAAlB,SACG7P,EAAMmC,KAAI,SAAC2N,EAAMjF,GAAW,IAAD,UAC1B,OACE,eAAC,GAAD,CAEEhE,UAAS,OAAEiJ,QAAF,IAAEA,GAAF,UAAEA,EAAM3C,cAAR,aAAE,EAAcC,WACzBtG,SAAQ,OAAEgJ,QAAF,IAAEA,GAAF,UAAEA,EAAM3C,cAAR,aAAE,EAAcE,UACxBtG,MAAK,OAAE+I,QAAF,IAAEA,GAAF,UAAEA,EAAM3C,cAAR,iBAAE,EAAc9L,cAAhB,aAAE,EAAsBiM,IAC7BnP,KAAI,OAAE2R,QAAF,IAAEA,OAAF,EAAEA,EAAM3R,KACZoN,UAAS,OAAEuE,QAAF,IAAEA,GAAF,UAAEA,EAAM/I,aAAR,aAAE,EAAauG,IACxBzE,MAAK,OAAEiH,QAAF,IAAEA,OAAF,EAAEA,EAAMjH,MACbvC,KAAI,OAAEwJ,QAAF,IAAEA,OAAF,EAAEA,EAAMC,aACZvE,QAAO,OAAEsE,QAAF,IAAEA,OAAF,EAAEA,EAAMrN,cACfgJ,WAAU,OAAEqE,QAAF,IAAEA,OAAF,EAAEA,EAAMpN,YAClBgJ,oBAAqB,aACrBlO,GAAE,OAAEsS,QAAF,IAAEA,OAAF,EAAEA,EAAMtS,GACVyC,OAAM,OAAE6P,QAAF,IAAEA,OAAF,EAAEA,EAAM3C,OAAO3P,GACrBmO,cAAa,OAAEmE,QAAF,IAAEA,OAAF,EAAEA,EAAME,eACrB3N,SAAQ,OAAEyN,QAAF,IAAEA,OAAF,EAAEA,EAAMzN,UAdXwI,cAsBjB,eAAC,GAAD,CACExD,MAAO,4HACPiB,YAvEc,kBAAM0D,GAAQ,IAwE5BzD,OAAQqB,EACRgE,YAxEc,SAACnQ,GACnB8C,EAASQ,EAActD,KAwEnBoJ,UAAW9G,EAAQqN,WACnBtG,SAAU/G,EAAQsN,UAClBQ,MAAO9N,EAAQ8N,MACfC,SAAU/N,EAAQmO,SAClBH,iBAAkBhO,EAAQiO,gB,kFCzHrBiC,GAAuB,SAAC9J,GAEnC,IAAMhH,EAASgG,cAAkC,SAAClD,GAAD,OAAWA,EAAMa,IAAI3D,UAEhEoB,EAAW+E,eACX6D,EAASC,aAAU,CACvBC,cAAe,CACbwE,MAAO,iBACPqC,cAAe,UAEjB5G,SAAU,SAACC,GACT,IAAIC,EAA0C,GAS9C,OARKD,EAAOsE,MAEA,4CAA4CM,KAAK5E,EAAOsE,SAClErE,EAAOqE,MAAQ,iHAFfrE,EAAOqE,MAAQ,kFAIZtE,EAAO2G,gBACV1G,EAAO0G,cAAgB,mFAElB1G,GAETC,SAAU,SAACF,GtBaM,IAAC1L,EsBZhB0C,GtBYgB1C,EsBXR,CACJgQ,MAAOtE,EAAOsE,MACdqC,cAAeC,KAAO5G,EAAO2G,eAAeE,WAC5CnL,UAAWA,ItBQA,uCAA2B,WAAO1E,GAAP,iBAAAE,EAAA,6DAC5CF,EAASnB,EAAe,YADoB,kBAGTxB,EAAcC,GAHL,OAGpCE,EAHoC,OAIxCwC,EAASZ,GAAgB,IACzBY,EAASf,GAAY,IACrBe,EAASnB,EAAe,cACxBlC,aAAamT,QAAQ,eAAgBtS,EAAIuS,cACzCpT,aAAamT,QAAQ,gBAAiBtS,EAAIwS,eARF,kDAUlCtR,EAAQ,KAAE6B,SACV,KAAEA,SAASjD,KAAKoB,MACf,KAAEuR,QAAU,gCACnBjQ,EAASV,EAAWZ,IACpBsB,EAASnB,EAAe,WAdgB,0DAA3B,wDsBLf+J,EAAOsH,eAIX,OAAItR,EACK,eAAC,KAAD,CAAU0E,GAAI,aAIrB,sBAAKP,UAAWC,KAAEmN,WAAlB,SACE,uBAAKpN,UAAWC,KAAE4I,MAAlB,UACE,+BACE,uBACE7H,MAAM,MACNC,OAAO,MACPC,QAAQ,cACRC,KAAK,OACLC,MAAM,6BALR,UAOE,uBACEC,EAAE,0EACFF,KAAK,YAEP,uBACEE,EAAE,mKACFF,KAAK,UAEP,uBACEE,EAAE,+JACFF,KAAK,UAEP,uBACEE,EAAE,+JACFF,KAAK,UAEP,yBACEM,GAAG,UACHC,GAAG,UACH2L,EAAE,UACF7L,UAAU,mCACVL,KAAK,UAEP,yBAAQM,GAAG,SAASC,GAAG,UAAU2L,EAAE,UAAUlM,KAAK,UAClD,yBAAQM,GAAG,UAAUC,GAAG,UAAU2L,EAAE,UAAUlM,KAAK,eAGvD,uBAAKnB,UAAWC,KAAEqN,UAAlB,UACE,oBAAGtN,UAAWC,KAAEsN,MAAhB,kCACA,oBAAGvN,UAAWC,KAAEuN,KAAhB,wCAEF,6GACA,wBAAMrH,SAAUN,EAAOe,aAAc5G,UAAWC,KAAER,KAAlD,UACE,uBAAKO,UAAWC,KAAEsE,UAAlB,UACE,gBAACiC,GAAA,EAAD,CAAKiH,GAAI,CAAEC,QAAS,OAAQC,WAAY,YAAxC,UACE,eAAC,KAAD,CACEF,GAAI,CAAE1C,MAAO,gBAAiB6C,GAAI,EAAGC,GAAI,MAE3C,eAAC/G,GAAA,EAAD,CACE9G,UAAWC,KAAE6K,MACb5Q,GAAG,QACH8M,KAAK,QACLlC,MAAO,iCACPtC,QAAQ,WACRzG,KAAK,QACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAOsE,MACrB1J,MAAOgF,EAAOK,OAAOqE,MAAQ,CAACrD,OAAO,iBAAmB,QAI3DrB,EAAOK,OAAOqE,OAAS,uBAAM1J,MAAO,CAACkK,MAAM,MAAO+C,WAAW,OAAtC,SAA+CjI,EAAOK,OAAOqE,WAGvF,uBAAKvK,UAAWC,KAAEsE,UAAlB,UACE,gBAACiC,GAAA,EAAD,CAAKiH,GAAI,CAAEC,QAAS,OAAQC,WAAY,YAAxC,UACE,eAAC,KAAD,CAAUF,GAAI,CAAE1C,MAAO,gBAAiB6C,GAAI,EAAGC,GAAI,MACnD,eAAC/G,GAAA,EAAD,CACE9G,UAAWC,KAAE6K,MACb5Q,GAAG,gBACH8M,KAAK,gBACLlC,MAAO,uCACPtC,QAAQ,WACRzG,KAAK,WACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAO2G,cACrB/L,MAAOgF,EAAOK,OAAO0G,cAAgB,CAAC1F,OAAO,iBAAmB,QAGnErB,EAAOK,OAAO0G,eAAiB,uBAAM/L,MAAO,CAACkK,MAAM,MAAO+C,WAAW,OAAtC,SAA+CjI,EAAOK,OAAO0G,mBAG/F,sBAAK5M,UAAWC,KAAE4H,QAAlB,SACE,eAACtF,GAAA,EAAD,CAAQxG,KAAK,SAASyG,QAAS,YAAaxC,UAAWC,KAAE8N,QAAzD,iDAKJ,uBAAK/N,UAAWC,KAAE+N,cAAlB,UACE,uBAAMhO,UAAWC,KAAEgO,aAAnB,kFACA,eAAC,KAAD,CAAS1N,GAAI,gBAAiBP,UAAWC,KAAEiO,QAA3C,mI,oBCjIGC,GAAe,WAC1B,IAAMlR,EAAW+E,eACX6D,EAASC,aAAU,CACvBC,cAAe,CACb6E,SAAU,GACVL,MAAO,GACPqC,cAAe,IAEjB5G,SAAU,SAACC,GACT,IAAIC,EAA0C,GAc9C,OAbKD,EAAOsE,MAGP,4CAA4CM,KAAK5E,EAAOsE,SAE3DrE,EAAOqE,MAAQ,iHAJfrE,EAAOqE,MAAQ,kFAMZtE,EAAO2G,gBACV1G,EAAO0G,cAAgB,mFAEpB3G,EAAO2E,WACV1E,EAAO0G,cAAgB,mFAElB1G,GAETC,SAAU,SAACF,GrBfe,IAAC1L,EqBgBzB0C,GrBhByB1C,EqBiBN,CACbqQ,SAAU3E,EAAO2E,SACjBL,MAAOtE,EAAOsE,MACdqC,cAAeC,KAAO5G,EAAO2G,eAAeE,YrBpB1B,uCAA8B,WAAO7P,GAAP,eAAAE,EAAA,6DACxDF,EAASnB,EAAe,YADgC,kBAG9CxB,EAAiBC,GAH6B,OAIpD0C,EATH,CAAClB,KAAM,gCAAiCmC,gBASb,IAJ4B,gDAM9CvC,EAAQ,KAAE6B,SACV,KAAEA,SAASjD,KAAKoB,MACf,KAAEuR,QACTjQ,EAZH,CAAClB,KAAM,yBAA0BO,MAYVX,IATgC,yBAWpDsB,EAASnB,EAAe,cACxBsS,YAAW,WACPnR,EAASnB,EAAe,WACzB,KAdiD,4EAA9B,wDqBuBxB+J,EAAOsH,eAMX,OACI,sBAAKnN,UAAWC,KAAEoO,cAAlB,SACE,uBAAKrO,UAAWC,KAAEqO,aAAlB,UACE,+BACE,uBACItN,MAAM,MACNC,OAAO,MACPC,QAAQ,cACRC,KAAK,OACLC,MAAM,6BALV,UAOE,uBACIC,EAAE,0EACFF,KAAK,YAET,uBACIE,EAAE,mKACFF,KAAK,UAET,uBACIE,EAAE,+JACFF,KAAK,UAET,uBACIE,EAAE,+JACFF,KAAK,UAET,yBACIM,GAAG,UACHC,GAAG,UACH2L,EAAE,UACF7L,UAAU,mCACVL,KAAK,UAET,yBAAQM,GAAG,SAASC,GAAG,UAAU2L,EAAE,UAAUlM,KAAK,UAClD,yBAAQM,GAAG,UAAUC,GAAG,UAAU2L,EAAE,UAAUlM,KAAK,eAGvD,uBAAKnB,UAAWC,KAAEqN,UAAlB,UACE,oBAAGtN,UAAWC,KAAEsN,MAAhB,kCACA,oBAAGvN,UAAWC,KAAEuN,KAAhB,wCAEF,qGACA,uBAAKxN,UAAWC,KAAEsO,UAAlB,UACE,wBAAMpI,SAAUN,EAAOe,aAAvB,UACE,sBAAK5G,UAAWC,KAAEsE,UAAlB,SACE,gBAACiC,GAAA,EAAD,CAAKiH,GAAI,CAAEC,QAAS,OAAQC,WAAY,YAAxC,UACE,eAAC,KAAD,CACIF,GAAI,CAAE1C,MAAO,gBAAiB6C,GAAI,EAAGC,GAAI,MAE7C,eAAC/G,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACb5Q,GAAG,WACH8M,KAAK,WACLlC,MAAO,8FACPtC,QAAQ,WACRzG,KAAK,OACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAO2E,SACrB/J,MACEgF,EAAOK,OAAO0E,SAAW,CAAE1D,OAAQ,iBAAoB,KAG5DrB,EAAOK,OAAO0E,UACX,uBAAM/J,MAAO,CAAEkK,MAAO,MAAO+C,WAAY,OAAzC,SACDjI,EAAOK,OAAO0E,gBAKrB,uBAAK5K,UAAWC,KAAEsE,UAAlB,UACE,gBAACiC,GAAA,EAAD,CAAKiH,GAAI,CAAEC,QAAS,OAAQC,WAAY,YAAxC,UACE,eAAC,KAAD,CACIF,GAAI,CAAE1C,MAAO,gBAAiB6C,GAAI,EAAGC,GAAI,MAE7C,eAAC/G,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACb5Q,GAAG,QACH8M,KAAK,QACLlC,MAAO,iCACPtC,QAAQ,WACRzG,KAAK,QACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAOsE,MACrB1J,MAAOgF,EAAOK,OAAOqE,MAAQ,CAAErD,OAAQ,iBAAoB,QAGhErB,EAAOK,OAAOqE,OACX,uBAAM1J,MAAO,CAAEkK,MAAO,MAAO+C,WAAY,OAAzC,SACDjI,EAAOK,OAAOqE,WAInB,sBAAKvK,UAAWC,KAAEsE,UAAlB,SACE,gBAACiC,GAAA,EAAD,CAAKiH,GAAI,CAAEC,QAAS,OAAQC,WAAY,YAAxC,UACE,eAAC,KAAD,CAAUF,GAAI,CAAE1C,MAAO,gBAAiB6C,GAAI,EAAGC,GAAI,MACnD,eAAC/G,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACb5Q,GAAG,gBACH8M,KAAK,gBACLlC,MAAO,uCACPtC,QAAQ,WACRzG,KAAK,WACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAO2G,cACrB/L,MACEgF,EAAOK,OAAO0G,cACR,CAAE1F,OAAQ,iBACV,KAGXrB,EAAOK,OAAO0G,eACX,uBAAM/L,MAAO,CAAEkK,MAAO,MAAO+C,WAAY,OAAzC,SACDjI,EAAOK,OAAO0G,qBAKrB,sBAAK5M,UAAWC,KAAE4H,QAAlB,SACE,eAACtF,GAAA,EAAD,CAAQxG,KAAK,SAASyG,QAAS,YAAaxC,UAAWC,KAAE8N,QAAzD,+HAKJ,uBAAK/N,UAAWC,KAAE+N,cAAlB,UACE,uBAAMhO,UAAWC,KAAEgO,aAAnB,qGACA,eAAC,KAAD,CAAS1N,GAAI,SAAUP,UAAWC,KAAEiO,QAApC,wD,oBC3KDM,GAAQ,WACnB,IAAM3S,EAASgG,cAAkC,SAAClD,GAAD,OAAWA,EAAMa,IAAI3D,UAEhEa,EAAQmF,cACZ,SAAClD,GAAD,OAAWA,EAAMO,aAAaxC,SAJP,EAMDyH,oBAAS,GANR,oBAMlBmC,EANkB,KAMZoC,EANY,KAOnB5G,EAAUC,eACV9E,EAAW+E,eACXtG,EAASmG,cACb,SAAClD,GAAD,OAAWA,EAAMa,IAAI9D,UAEvBqQ,qBAAU,WACR9O,EAASmB,GAAS,CAAEd,MAAO,GAAIC,OAAQ,OACtC,IAEH,IAAM6K,EAAsB,SAAClO,EAAYU,GACvCqC,ErB+C6B,SAAC/C,EAAUU,GAAX,8CAAmC,WAAOqC,GAAP,SAAAE,EAAA,+EAEtDzC,EAA6BR,EAAGU,GAFsB,OAG5DqC,EAASkB,GAAiBjE,EAAGU,IAH+B,gDAK5DqC,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WANoC,yDAAnC,sDqB/CpB2S,CAAkBvU,EAAIU,KAG5BiB,GACHiG,EAAQK,KAAK,UAOf,MAAe,YAAXzG,EACK,eAAC,GAAD,IAGP,uBAAKsE,UAAWC,KAAEyO,WAAlB,UACE,uBAAK1O,UAAWC,KAAE4I,MAAlB,UACE,oFACA,sBAAK7I,UAAWC,KAAE0O,YAAlB,SACE,eAACpM,GAAA,EAAD,CAAQL,QAAS,kBAAMwG,GAAQ,IAA/B,yFAEF,sBAAK1I,UAAWC,KAAEsM,UAAlB,SACG7P,EAAMmC,KAAI,SAAC2N,EAAMjF,GAAW,IAAD,UAC1B,OACE,eAAC,GAAD,CAEEhE,UAAS,OAAEiJ,QAAF,IAAEA,GAAF,UAAEA,EAAM3C,cAAR,aAAE,EAAcC,WACzBtG,SAAQ,OAAEgJ,QAAF,IAAEA,GAAF,UAAEA,EAAM3C,cAAR,aAAE,EAAcE,UACxBtG,MAAK,OAAE+I,QAAF,IAAEA,GAAF,UAAEA,EAAM3C,cAAR,iBAAE,EAAc9L,cAAhB,aAAE,EAAsBiM,IAC7BnP,KAAI,OAAE2R,QAAF,IAAEA,OAAF,EAAEA,EAAM3R,KACZoN,UAAS,OAAEuE,QAAF,IAAEA,GAAF,UAAEA,EAAM/I,aAAR,aAAE,EAAauG,IACxBzE,MAAK,OAAEiH,QAAF,IAAEA,OAAF,EAAEA,EAAMjH,MACbvC,KAAI,OAAEwJ,QAAF,IAAEA,OAAF,EAAEA,EAAMC,aACZvE,QAAO,OAAEsE,QAAF,IAAEA,OAAF,EAAEA,EAAMrN,cACfgJ,WAAU,OAAEqE,QAAF,IAAEA,OAAF,EAAEA,EAAMpN,YAClBgJ,oBAAqBA,EACrBlO,GAAE,OAAEsS,QAAF,IAAEA,OAAF,EAAEA,EAAMtS,GACVmO,cAAa,OAAEmE,QAAF,IAAEA,OAAF,EAAEA,EAAME,eACrB3N,SAAQ,OAAEyN,QAAF,IAAEA,OAAF,EAAEA,EAAMzN,SAChBuJ,aAAa,EACb3L,OAAM,OAAE6P,QAAF,IAAEA,OAAF,EAAEA,EAAM3C,OAAO3P,IAfhBqN,WAsBf,eAAC,GAAD,CACExD,MAAO,mIACPiB,YA3Cc,kBAAM0D,GAAQ,IA4C5BzD,OAAQqB,EACRpB,QA5CiB,SAAC/K,GACtB8C,ErBuEmB,SAAC9C,GAAD,8CAAqC,WAAO8C,EAAmBC,GAA1B,mBAAAC,EAAA,6DACxDF,EAASnB,EAAe,YAElBqO,EAAc,CACZtP,KAAMV,EAAOiM,cAAcvL,KAC3B0K,MAAOpL,EAAOiM,cAAcb,OAE9BqJ,EAAe,CACjBnL,MAAOtJ,EAAOsJ,QAEZ/F,EAAU,IAAIC,UACXC,OAAO,gBAAgBrC,KAAKC,UAAU2O,IAE/CzM,EAASE,OAAO,QAAQgR,EAAanL,OAbmB,mBAe9C/I,EAAoBgD,GAf0B,QAiBpDT,EAASmB,GAAS,CAACd,MAAO,GAAIC,OAAQ,KACtCN,EAASnB,EAAe,cAlB4B,kDAoBpDmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WArB4B,0DAArC,wDqBvEVoJ,CAAQ/K,W,4DCxBR0U,GAA+B,SAAC,GAKtC,IAJLpL,EAII,EAJJA,MACAuB,EAGI,EAHJA,YACAC,EAEI,EAFJA,OAGMQ,GADF,EADJqJ,YAEcpJ,iBAAyB,OADnC,EAEoBvB,oBAAS,GAF7B,oBAEG4K,EAFH,aAGwB5K,oBAAS,IAHjC,oBAGG6K,EAHH,aAIoB7K,mBAAS,KAJ7B,iCAKoBA,sBALpB,oBAKGwB,EALH,KAKSC,EALT,OAM0BzB,qBAN1B,oBAMY8K,GANZ,aAOwB9K,qBAPxB,oBAOG+K,EAPH,KAOWC,EAPX,OAQ4BhL,qBAR5B,oBAQaiL,GARb,WASEnS,EAAW+E,eA2BjB,OACE,eAACqE,GAAA,EAAD,CAAOC,KAAMrB,EAAQsB,QAASvB,EAA9B,SACE,gBAACwB,GAAA,EAAD,CAAKxG,UAAWC,KAAEwG,WAAlB,UACE,sBAAKzG,UAAWC,KAAEyG,IAAlB,SACE,sBAAI1G,UAAWC,KAAE8D,MAAjB,yMAEE,yBACE/D,UAAWC,KAAE0G,UACbzE,QAAS,WACP8C,KAHJ,SAME,sBACEhE,MAAM,KACNG,KAAM,MACNF,OAAO,KACPC,QAAQ,YACRE,MAAM,6BALR,SAOE,uBAAMC,EAAE,mHAKhB,uBAAKrB,UAAWC,KAAE+D,QAAlB,UACE,uBAAKhE,UAAWC,KAAEc,QAAlB,UACE,uEACA,sBAAK8C,IAAKqL,GAAkBzL,EAAOsF,IAAI,kBACvC,sBAAK/I,UAAWC,KAAEoP,eAAlB,SACE,eAACvI,GAAA,EAAD,CACE/K,KAAK,OACLiL,KAAK,QACLtC,SAxDC,SAACxJ,GAEd,IAAMoU,EAAS,IAAIC,WACb7R,EAAW,IAAIC,SAEf+J,EAAUxM,EAAEoM,OAAOK,OAASzM,EAAEoM,OAAOK,MAAM,GAC7CD,IACF9B,EAAQ8B,GACRuH,EAAWO,OAAOC,IAAIC,gBAAgBhI,IACtChK,EAASE,OAAO,SAAU8J,EAASA,EAAQV,MAC3CoI,EAAY1R,GACRqR,IAEFO,EAAOK,UAAY,WACjBR,EAAUG,EAAOM,SAEfZ,EAAQM,EAAOO,cAAcnI,GAC5B4H,EAAOQ,WAAWpI,MAwCfE,IAAKnC,SAIX,sBAAKzF,UAAWC,KAAE4H,QAAlB,SACE,eAACtF,GAAA,EAAD,CACEwN,UAAWpK,EACXnD,QAAS,YACTN,QA5CY,WACtBjF,EAASY,EAAmB,CAAEE,OAAQ4H,MAwC9B,+EChFCqK,GAAkC,SAAC,GAKzC,IAJLvM,EAII,EAJJA,MACAmH,EAGI,EAHJA,SACApH,EAEI,EAFJA,SACAD,EACI,EADJA,UACI,EACwBY,oBAAS,GADjC,oBACGc,EADH,KACWgL,EADX,KAEEhT,EAAW+E,eAOjB,OACE,gBAAC4G,GAAA,EAAD,CAAO5I,UAAWC,KAAEiQ,YAApB,UACE,uBAAKlQ,UAAWC,KAAE4I,MAAlB,UACE,uBAAK7I,UAAWC,KAAEkQ,SAAlB,UACE,6EACA,sBAAKtM,IAAKJ,EAAOsF,IAAI,QAEvB,uBAAK/I,UAAWC,KAAEqN,UAAlB,UACE,8BAAK/J,EAAY,IAAMC,IACvB,sCAAQoH,KACR,eAACrI,GAAA,EAAD,CACEvC,UAAWC,KAAEmQ,YACb5N,QAAS,YACTN,QAAS,kBAAM+N,GAAU,IAH3B,iIAUJ,eAAC,GAAD,CACExM,MAAOA,EACPuB,YA3Bc,kBAAMiL,GAAU,IA4B9BhL,OAAQA,EACR6J,YA5Bc,SAACxS,GACnBW,EAASY,EAAmB,CAAEE,OAAQzB,Y,oBCP7B+T,GAA+B,SAAC,GAA6B,IAA3B7M,EAA0B,EAA1BA,SAAUD,EAAgB,EAAhBA,UACjDtG,EAAW+E,eACX6D,EAASC,aAAU,CACvBC,cAAe,CACb+D,WAAYvG,EACZwG,UAAWvG,GAEbwC,SAAU,SAACC,GACT,IAAIC,EAA0C,GAO9C,OANKD,EAAO6D,aACV5D,EAAO4D,WAAa,mFAEjB7D,EAAO8D,YACV7D,EAAO6D,UAAY,mFAEd7D,GAETC,SAAU,SAACF,GACThJ,EACEQ,EAAc,CACZqM,WAAY7D,EAAO6D,WACnBC,UAAW9D,EAAO8D,gBAK1B,OACE,gBAACnB,GAAA,EAAD,CAAO5I,UAAWC,KAAEqQ,SAApB,UACE,qBAAItQ,UAAWC,KAAE8D,MAAjB,+GACA,sBAAK/D,UAAWC,KAAEsQ,YAAlB,SACE,wBAAMpK,SAAUN,EAAOe,aAAvB,UACE,uBAAK5G,UAAWC,KAAEsE,UAAlB,UACE,qDACA,eAACuC,GAAA,EAAD,CACE/K,KAAM,OACNO,MAAOuJ,EAAOI,OAAO6D,WACrB9J,UAAWC,KAAE6K,MACb9D,KAAM,aACNtC,SAAUmB,EAAOoB,aACjBxC,YAAa,4EACb5D,MAAOgF,EAAOK,OAAO4D,WAAa,CAAC5C,OAAO,iBAAmB,KAG9DrB,EAAOK,OAAO4D,YAAc,uBAAMjJ,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAO4D,gBAG1E,uBAAK9J,UAAWC,KAAEsE,UAAlB,UACE,6EACA,eAACuC,GAAA,EAAD,CACE/K,KAAM,OACNiL,KAAM,YACN1K,MAAOuJ,EAAOI,OAAO8D,UACrB/J,UAAWC,KAAE6K,MACbpG,SAAUmB,EAAOoB,aACjBxC,YAAa,4EACb5D,MAAOgF,EAAOK,OAAO6D,UAAY,CAAC7C,OAAO,iBAAmB,KAE7DrB,EAAOK,OAAO6D,WAAa,uBAAMlJ,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAO6D,eAGzE,sBAAK/J,UAAWC,KAAE4H,QAAlB,SACE,eAACtF,GAAA,EAAD,CAAQC,QAAS,YAAaxC,UAAWC,KAAEmQ,YAAarU,KAAM,SAA9D,8G,oBCnECyU,GAAmC,SAAC,GAA0B,IAAxB/F,EAAuB,EAAvBA,iBAAuB,EACtCtG,mBAAmBsG,GADmB,oBACjEC,EADiE,KACtDC,EADsD,KAElE1N,EAAW+E,eAKjB,OACE,eAAC4G,GAAA,EAAD,CAAO5I,UAAWC,KAAEwQ,cAApB,SACE,uBAAKzQ,UAAWC,KAAE4I,MAAlB,UACE,qBAAI7I,UAAWC,KAAE8D,MAAjB,mGACA,sBAAK/D,UAAWC,KAAEgL,WAAlB,SACGpG,GAAOhG,KAAI,SAAC0G,EAAOgC,GAClB,OACE,eAAC2D,GAAA,EAAD,CACE5O,MAAOiJ,EACP4F,QAAST,GAAaA,EAAUU,SAAS7F,EAAMjJ,OAC/C+O,QACE,eAACC,GAAA,EAAD,CACEzK,MAAO,CAAE6M,QAAS,QAClBhJ,SAAU,SAACxJ,GACLA,EAAEyJ,cAAcwG,SAClBR,EAAa,GAAD,oBAAKD,GAAL,CAAgBnF,EAAMjJ,SAClClB,QAAQC,IAAIqP,KAEZC,EACED,EAAU1L,QAAO,SAACC,GAAD,OAAOA,IAAMsG,EAAMjJ,UAEtClB,QAAQC,IAAIqP,OAKpB5F,MACE,sBACEjE,MACE6J,EAAUU,SAAS7F,EAAMjJ,OACrB,CAAEwE,gBAAiB,WACnB,CAAEA,gBAAiB,WAEzBd,UAAWC,KAAEyQ,WANf,SAQGnL,EAAMT,QAGXyG,eAAe,aAKvB,eAAChJ,GAAA,EAAD,CAAQwN,SAAUtF,GAAkBC,EAAWlI,QAAS,YAAaxC,UAAWC,KAAEmQ,YAAalO,QA9C7E,WACtBjF,EAASQ,EAAc,CAAEiN,UAAWA,MA6ChC,2H,8BC9CKiG,GAAkC,SAAC,GAAQ,gBACtD,IAAM1T,EAAW+E,eACX6D,EAASC,aAAU,CACvBC,cAAe,CACb6K,YAAa,GACbC,YAAa,IAEf7K,SAAU,SAACC,GACT,IAAIC,EAA0C,GAQ9C,OAPKD,EAAO2K,cACV1K,EAAO0K,YAAc,mFAElB3K,EAAO4K,cACV3K,EAAO2K,YAAc,mFAGhB3K,GAETC,SAAU,SAACF,G5BqIsB,IAAC7L,E4BpIhC6C,G5BoIgC7C,E4BnIR,CACpB0W,kBAAmBjE,KAAO5G,EAAO2K,aAAa9D,WAC9CiE,kBAAmBlE,KAAO5G,EAAO4K,aAAa/D,Y5BiInB,uCAAqE,WAAO7P,GAAP,SAAAE,EAAA,6DACtGF,EAASnB,EAAe,YAD8E,kBAG5F9B,EAA0BI,GAHkE,OAKlG6C,EAASD,KACTC,EAASnB,EAAe,cACxBkC,IAAMgT,QAAQ,8HAPoF,gDASlG/T,EAASf,GAAY,IACrBe,EAASZ,GAAgB,IACzBjB,QAAQC,IAAR,MACA4B,EAASnB,EAAe,WAZ0E,yDAArE,2D4B5HnC,OACE,gBAAC8M,GAAA,EAAD,CAAO5I,UAAWC,KAAEgR,aAApB,UACE,qBAAIjR,UAAWC,KAAE8D,MAAjB,mGACA,sBAAK/D,UAAWC,KAAEsQ,YAAlB,SACE,wBAAMpK,SAAUN,EAAOe,aAAvB,UACE,uBAAK5G,UAAWC,KAAEsE,UAAlB,UACE,4GACA,eAACuC,GAAA,EAAD,CACE/K,KAAM,WACNiL,KAAM,cACNhH,UAAWC,KAAE6K,MACbxO,MAAOuJ,EAAOI,OAAO2K,YACrBlM,SAAUmB,EAAOoB,aACjBxC,YAAa,kFACb5D,MAAOgF,EAAOK,OAAO0K,YAAc,CAAC1J,OAAO,iBAAmB,KAE/DrB,EAAOK,OAAO0K,aAAe,uBAAM/P,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAO0K,iBAG3E,uBAAK5Q,UAAWC,KAAEsE,UAAlB,UACE,sGACA,eAACuC,GAAA,EAAD,CACE/K,KAAM,WACNiL,KAAM,cACNhH,UAAWC,KAAE6K,MACbxO,MAAOuJ,EAAOI,OAAO4K,YACrBnM,SAAUmB,EAAOoB,aACjBxC,YAAa,kFACb5D,MAAOgF,EAAOK,OAAO2K,YAAc,CAAC3J,OAAO,iBAAmB,KAE/DrB,EAAOK,OAAO2K,aAAe,uBAAMhQ,MAAO,CAACkK,MAAM,OAApB,SAA6BlF,EAAOK,OAAO2K,iBAG3E,sBAAK7Q,UAAWC,KAAE4H,QAAlB,SACE,eAACtF,GAAA,EAAD,CACEC,QAAS,YACTxC,UAAWC,KAAEmQ,YACbrU,KAAM,SAHR,8GCvCCmV,GAAW,WAAO,IAAD,EACtBxV,EAASmG,cACb,SAAClD,GAAD,OAAWA,EAAMa,IAAI9D,UAEjBG,EAASgG,cAAkC,SAAClD,GAAD,OAAWA,EAAMa,IAAI3D,UAChEiG,EAAUC,eACVtF,EAAUoF,cACd,SAAClD,GAAD,OAAWA,EAAMtB,YAAYZ,WAO/B,OAJKZ,GACHiG,EAAQK,KAAK,UAGA,YAAXzG,EACK,eAAC,GAAD,KAETN,QAAQC,IAAIoB,GAEV,sBAAKuD,UAAWC,KAAEkR,SAAlB,SACE,eAACnF,GAAA,EAAD,UACE,uBAAKhM,UAAWC,KAAE4I,MAAlB,UACE,sBAAK7I,UAAWC,KAAEyG,IAAlB,SACE,oKAEF,uBAAK1G,UAAWC,KAAE+D,QAAlB,UACE,eAAC,GAAD,CACEP,MAAK,OAAEhH,QAAF,IAAEA,GAAF,UAAEA,EAASsB,cAAX,aAAE,EAAiBiM,IACxBzG,UAAS,OAAE9G,QAAF,IAAEA,OAAF,EAAEA,EAASqN,WACpBtG,SAAQ,OAAE/G,QAAF,IAAEA,OAAF,EAAEA,EAASsN,UACnBa,SAAQ,OAAEnO,QAAF,IAAEA,OAAF,EAAEA,EAASmO,WAErB,eAAC,GAAD,CACErH,UAAS,OAAE9G,QAAF,IAAEA,OAAF,EAAEA,EAASqN,WACpBtG,SAAQ,OAAE/G,QAAF,IAAEA,OAAF,EAAEA,EAASsN,YAErB,eAAC,GAAD,CAAsBU,iBAAgB,OAAEhO,QAAF,IAAEA,OAAF,EAAEA,EAASiO,YACjD,eAAC,GAAD,gB,wCC9DC0G,GAA4B,SAAC,GAEtC,IADC7S,EACF,EADEA,SAAS8S,EACX,EADWA,UAEJpU,EAAW+E,eAMjB,OALA+J,qBAAU,W3B0EwB,IAAC7R,E2BzE5BmX,GACCpU,G3BwE2B/C,E2BxEKmX,E3BwEN,uCAAe,WAAOpU,GAAP,SAAAE,EAAA,sDACjDrC,EAA+BZ,GADkB,2CAAf,0D2BtEhC,IAEE,eAAC0O,GAAA,EAAD,CAAOpG,QAAQ,WAAWxC,UAAWC,KAAE4I,MAAvC,SACI,uBAAK7I,UAAWC,KAAEqR,gBAAlB,UACK/S,EAASM,KAAI,SAACqO,EAAQ3F,GAAS,IAAD,MAC3B,OACI,uBAAKvH,UAAWC,KAAEiN,QAAlB,UAEI,uBAAKlN,UAAWC,KAAEyG,IAAlB,UACI,sBAAK1G,UAAWC,KAAEsR,aAAc1N,IAAG,OAAEqJ,QAAF,IAAEA,GAAF,UAAEA,EAASrD,cAAX,iBAAE,EAAiB9L,cAAnB,aAAE,EAAyBiM,IAAKjB,IAAI,kBACvE,qBAAI/I,UAAWC,KAAE2K,SAAjB,gBAA4BsC,QAA5B,IAA4BA,GAA5B,UAA4BA,EAASrD,cAArC,aAA4B,EAAiBC,gBAEjD,sBAAK9J,UAAWC,KAAEpF,KAAlB,gBAAyBqS,QAAzB,IAAyBA,OAAzB,EAAyBA,EAASrS,SANN0M,MAYxC,uBAAKvH,UAAWC,KAAEuR,gBAAlB,UACI,sBAAKxR,UAAWC,KAAEsE,UAAlB,SACI,eAACuC,GAAA,EAAD,CAAWrC,YAAa,4EAAiBzE,UAAWC,KAAE6K,UAE1D,sBAAK9K,UAAWC,KAAE4H,QAAlB,SACI,eAACtF,GAAA,EAAD,CAAQC,QAAS,YAAjB,+E,oBCbXiP,GAA8B,SAAC,GAKO,IAJH1N,EAIE,EAJFA,MACAiB,EAGE,EAHFA,YACAC,EAEE,EAFFA,OAItCQ,GAFwC,EADFH,SAG9BI,iBAAyB,OAFO,EAGtBvB,qBAHsB,oBAGvCwB,EAHuC,KAGjCC,EAHiC,KAIxC8L,EAAS7P,cAAuC,SAAAlD,GAAK,OAAEA,EAAMtB,YAAYV,UACzEM,EAAW+E,eAOX6D,EAASC,aAAU,CACrBC,cAAe,CACXiB,KAAM,IAEVhB,SAAU,SAACC,GACP,IAAIC,EAA0C,GAI9C,OAHKD,EAAOe,OACRd,EAAOc,KAAO,mFAEXd,GAEXC,SAAU,SAACF,G5BNU,IAAC9L,E4BOlB8C,G5BPkB9C,E4BOK,CACnBiM,cAAc,CACVY,KAAKf,EAAOe,KACZjL,KAAK,QACL4V,YAAY,CAACD,GAAkB,KAEnCjO,MAAMkC,G5BbO,uCAAgC,WAAO1I,GAAP,mBAAAE,EAAA,6DACzDF,EAASnB,EAAe,YAClB8V,EAAmB,CACrB5K,KAAM7M,EAAOiM,cAAcY,KAC3BjL,KAAM5B,EAAOiM,cAAcrK,KAC3B4V,YAAYxX,EAAOiM,cAAcuL,aAE/B/C,EAAe,CACjBnL,MAAOtJ,EAAOsJ,QAEZ/F,EAAU,IAAIC,UACXC,OAAO,gBAAgBrC,KAAKC,UAAUoW,IAE/ClU,EAASE,OAAO,QAAQgR,EAAanL,OAboB,kBAe/C3I,EAAsB4C,GAfyB,OAiBrDT,EAASuB,MACTvB,EAASnB,EAAe,cAlB6B,kDAoBrDmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WArB6B,0DAAhC,wD4BejBkJ,OAGR,OACI,eAACqB,GAAA,EAAD,CAAOC,KAAMrB,EAAQsB,QAASvB,EAA9B,SACI,gBAACwB,GAAA,EAAD,CAAKxG,UAAWC,KAAEwG,WAAlB,UACI,sBAAKzG,UAAWC,KAAEyG,IAAlB,SACI,sBAAI1G,UAAWC,KAAE8D,MAAjB,UACKA,EACD,yBACI/D,UAAWC,KAAE0G,UACbzE,QAAS,WACL8C,KAHR,SAMI,sBACIhE,MAAM,KACNG,KAAM,MACNF,OAAO,KACPC,QAAQ,YACRE,MAAM,6BALV,SAOI,uBACIC,EAAE,mHAKtB,sBAAKrB,UAAWC,KAAE+D,QAAlB,SACI,wBAAMmC,SAAUN,EAAOe,aAAc5G,UAAWC,KAAER,KAAlD,UACI,uBAAKO,UAAWC,KAAEsE,UAAlB,UACI,uJACA,eAACuC,GAAA,EAAD,CACI9G,UAAWC,KAAE6K,MACbrG,YAAa,4EACbuC,KAAK,OACLjL,KAAK,OACL2I,SAAUmB,EAAOoB,aACjB3K,MAAOuJ,EAAOI,OAAOe,KACrBnG,MAAOgF,EAAOK,OAAOc,KAAO,CAACE,OAAQ,iBAAmB,KAE3DrB,EAAOK,OAAOc,MAAQ,uBAAMnG,MAAO,CAACkK,MAAM,MAAO+C,WAAW,OAAtC,SAA+CjI,EAAOK,OAAOc,UAGxF,uBAAKhH,UAAWC,KAAEsE,UAAlB,UACI,sJACA,eAACuC,GAAA,EAAD,CACI9G,UAAS,UAAKC,KAAEwH,WAAP,aAAsBxH,KAAE6K,OACjC/O,KAAK,OACLiL,KAAK,QACLtC,SA5Eb,SAACxJ,GACZ,IAAMwM,EAAUxM,EAAEoM,OAAOK,OAASzM,EAAEoM,OAAOK,MAAM,GAC7CD,GACA9B,EAAQ8B,IA0EYE,IAAKnC,OAGb,sBAAKzF,UAAWC,KAAE4H,QAAlB,SACI,eAACtF,GAAA,EAAD,CAAQC,QAAS,YAAazG,KAAK,SAAnC,wFCrGf8V,GAAW,WACtB,IAAMhW,EAASgG,cAAkC,SAAClD,GAAD,OAAWA,EAAMa,IAAI3D,UAD1C,EAEJsI,oBAAS,GAFL,oBAErBmC,EAFqB,KAEfoC,EAFe,KAGtB5G,EAAUC,eACV9E,EAAW+E,eACZnG,GACHiG,EAAQK,KAAK,UAEf,IAAMzG,EAASmG,cACb,SAAClD,GAAD,OAAWA,EAAMa,IAAI9D,UAEjB4C,EAAWuD,cACf,SAAClD,GAAD,OAAWA,EAAMY,KAAKjB,YAElBwT,EAAkBjQ,cACpB,SAAClD,GAAD,OAAWA,EAAMY,KAAKhB,YAfE,EAiBD4F,mBAAwB,MAjBvB,oBAiBrB4N,EAjBqB,KAiBbC,EAjBa,KAuB5BjG,qBAAU,WACR9O,EAASuB,MACTpD,QAAQC,IAAIiD,KAEX,IAOH,GAAe,YAAX5C,EACF,OAAO,eAAC,GAAD,IAGT,IAAMuW,EAAoB,SAAC/X,GACzB+C,E7BiB2B,SAAC/C,EAAUC,GAAX,8CAAoC,WAAO8C,GAAP,eAAAE,EAAA,6DAC/DF,EAASnB,EAAe,YADuC,kBAGzChB,EAA0BZ,EAAGC,GAHY,OAGrDM,EAHqD,OAI3DW,QAAQC,IAAIZ,EAAIF,KAAKA,MACrB0C,EAlDG,CACHlB,KAAM,gCACNc,QAgD4BpC,EAAIF,KAAKA,OACrC0C,EAASnB,EAAe,cANmC,kDAQ3DmB,EAASV,EAAW,KAAEiB,SAAS7B,QAC/BsB,EAASnB,EAAe,WATmC,0DAApC,sD6BjBlBoW,CAAgBhY,EAAG,CAAEoD,MAAO,GAAIC,OAAQ,MAInD,OACE,uBAAKyC,UAAWC,KAAEkS,cAAlB,UACE,eAAC5P,GAAA,EAAD,CAAQL,QAAS,kBAAMwG,GAAQ,IAA/B,2EACA,uBAAK1I,UAAWC,KAAEmS,UAAlB,UACE,eAACxJ,GAAA,EAAD,CAAOpG,QAAQ,WAAf,SACE,sBAAKxC,UAAWC,KAAEoS,aAAlB,SACG/T,EAASO,KAAI,SAACyT,EAAO/K,GACpB,OACI,uBAAKvH,UAAWC,KAAEsS,QAASrQ,QAAS,WAClC+P,EAAmBK,EAAOpY,IAC1B8X,EAAWM,EAAOpY,KAFpB,UAIE,sBAAK2J,IAAKyO,EAAO7O,MAAMuG,IAAKjB,IAAI,kBAChC,sBAAK/I,UAAWC,KAAEuS,YAAlB,SAAgCF,EAAOtL,iBAOrD,eAAC,GAAD,CAAiBzI,SAAUuT,EAAiBT,UAAWU,OAGvD,eAAC,GAAD,CAAiBhO,MAAO,+FAAqBkB,OAAQqB,EAAMtB,YArC3C,kBAAM0D,GAAQ,UCxCvB+J,GAAS,WACpB,OACE,uCACE,eAAC,KAAD,CAAOC,KAAM,oBAAqBC,OAAQhQ,GAAagJ,MACvD,eAAC,KAAD,CAAO+G,KAAM,SAAUC,OAAQhQ,GAAa6L,MAC5C,eAAC,KAAD,CAAOkE,KAAM,SAAUC,OAAQ,kBAAM,eAAC,GAAD,OACrC,eAAC,KAAD,CAAOD,KAAM,gBAAiBC,OAAQ,kBAAM,eAAC,GAAD,OAC5C,eAAC,KAAD,CAAOD,KAAM,YAAaC,OAAQ,kBAAM,eAAC,GAAD,OACxC,eAAC,KAAD,CAAOD,KAAM,YAAaC,OAAQ,kBAAM,eAAC,GAAD,OACxC,eAAC,KAAD,CAAUC,KAAK,IAAIrS,GAAG,iB,qBCPfsS,GAAM,WACf,IAAM5V,EAAW+E,eACXpG,EAAgBiG,cAAkC,SAAAlD,GAAK,OAAIA,EAAMa,IAAI5D,iBAM3E,OAJAmQ,qBAAU,WACN9O,EnCkBmB,uCAAM,WAAOA,GAAP,eAAAE,EAAA,6DAC7BF,EAASnB,EAAe,YADK,kBAGnBxB,IAHmB,OAIzB2C,EAAShB,GAAmB,IAC5BgB,EAASf,GAAY,IACrBe,EAASnB,EAAe,cANC,gDASnBH,EAAQ,KAAE6B,SACV,KAAEA,SAASjD,KAAKoB,MACf,KAAEuR,QACTjQ,EAASjB,EAAcL,IACvBsB,EAASnB,EAAe,WAbC,yBAezBmB,EAAShB,GAAmB,IAfH,4EAAN,yDmCjBpB,IAEEL,EAIG,eAAC,KAAD,UAEI,uBAAKoE,UAAWC,KAAE6S,WAAlB,UACI,eAAC,GAAD,IACA,sBAAK9S,UAAWC,KAAE4I,MAAlB,SACI,eAAC,GAAD,MAEJ,eAAC,GAAD,SAVL,eAAC,GAAD,KCbfnQ,IAGAqa,IAASJ,OACL,eAAC,KAAD,UACA,eAAC,KAAD,CAAUhT,MAAOA,GAAjB,SACI,eAAC,GAAD,QAGJqT,SAASC,eAAe,U,mBChB5Bza,EAAOC,QAAU,CAAC,WAAa,2BAA2B,MAAQ,sBAAsB,UAAY,0BAA0B,KAAO,qBAAqB,MAAQ,sBAAsB,cAAgB,8BAA8B,QAAU,wBAAwB,KAAO,qBAAqB,KAAO,qBAAqB,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,QAAU,0B,mBCAhbD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,IAAM,oBAAoB,MAAQ,sBAAsB,UAAY,0BAA0B,QAAU,wBAAwB,aAAe,6BAA6B,SAAW,yBAAyB,WAAa,2BAA2B,OAAS,uBAAuB,UAAY,0BAA0B,QAAU,0B,mBCAlYD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,MAAQ,sBAAsB,IAAM,oBAAoB,aAAe,6BAA6B,OAAS,uBAAuB,gBAAkB,gCAAgC,MAAQ,sBAAsB,UAAY,0BAA0B,WAAa,2BAA2B,UAAY,4B,mBCAlWD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,IAAM,oBAAoB,MAAQ,sBAAsB,UAAY,0BAA0B,QAAU,wBAAwB,UAAY,0BAA0B,MAAQ,sBAAsB,WAAa,2BAA2B,OAAS,uBAAuB,QAAU,0B,mBCAhVD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,gBAAkB,gCAAgC,QAAU,wBAAwB,IAAM,oBAAoB,aAAe,6BAA6B,KAAO,qBAAqB,gBAAkB,gCAAgC,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,0B,mBCAtWD,EAAOC,QAAU,CAAC,SAAW,yBAAyB,YAAc,4BAA4B,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,YAAc,8B,mBCApND,EAAOC,QAAU,CAAC,aAAe,6BAA6B,YAAc,4BAA4B,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,YAAc,8B,mBCA5ND,EAAOC,QAAU,CAAC,WAAa,2BAA2B,IAAM,oBAAoB,MAAQ,sBAAsB,UAAY,0BAA0B,YAAc,4BAA4B,QAAU,wBAAwB,QAAU,wBAAwB,eAAiB,+BAA+B,QAAU,0B,mBCAhUD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,WAAa,2BAA2B,QAAU,wBAAwB,KAAO,qBAAqB,QAAU,0B,mBCApKD,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,MAAQ,sBAAsB,YAAc,4BAA4B,WAAa,2BAA2B,WAAa,6B,mBCA7LD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,SAAW,yBAAyB,YAAc,4BAA4B,SAAW,2B,mBCAvKD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,MAAQ,sBAAsB,SAAW,yBAAyB,UAAY,0BAA0B,YAAc,8B,mBCAlLD,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,UAAY,0BAA0B,aAAe,6BAA6B,QAAU,0B,mBCA5JD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,MAAQ,sBAAsB,YAAc,4BAA4B,UAAY,4B,mBCA9ID,EAAOC,QAAU,CAAC,SAAW,yBAAyB,MAAQ,sBAAsB,IAAM,oBAAoB,QAAU,2B","file":"static/js/main.69a81e67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"styles_block__usWHq\",\"inputWrap\":\"styles_inputWrap__3eiXx\",\"sendBtn\":\"styles_sendBtn__1gxu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"styles_preloader__3q9Sk\",\"imgWrap\":\"styles_imgWrap__1AHpT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"styles_appWrapper__JFop_\",\"inner\":\"styles_inner__2OZGq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBlock\":\"styles_modalBlock__3oi7a\",\"top\":\"styles_top__11O73\",\"title\":\"styles_title__1G4Dl\",\"cancelBtn\":\"styles_cancelBtn__3g_GD\",\"content\":\"styles_content__1811Q\",\"form\":\"styles_form__3Jwnl\",\"userName\":\"styles_userName__1F3eG\",\"email\":\"styles_email__1JLvy\",\"firstName\":\"styles_firstName__3ogU8\",\"lastName\":\"styles_lastName__3M_qq\",\"inputWrap\":\"styles_inputWrap__Idbkv\",\"input\":\"styles_input__3UhHP\",\"checkboxWrap\":\"styles_checkboxWrap__12pek\",\"checkboxes\":\"styles_checkboxes__6iv7G\",\"btnWrap\":\"styles_btnWrap__1zQ5l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"styles_sidebar__3F_5j\",\"sidebarItem\":\"styles_sidebarItem__3MzKm\",\"logoIcon\":\"styles_logoIcon__RSHXm\",\"activeLink\":\"styles_activeLink__2w9hD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"styles_post__3H2mL\",\"inner\":\"styles_inner__sOaVn\",\"top\":\"styles_top__POEru\",\"topText\":\"styles_topText__1ZMm7\",\"title\":\"styles_title__3DL2w\",\"removeBtn\":\"styles_removeBtn__1OTHd\",\"content\":\"styles_content__30tqL\",\"postImageWrap\":\"styles_postImageWrap__2Y6_Y\",\"postImage\":\"styles_postImage__es34X\",\"topic\":\"styles_topic__26VdE\",\"bottom\":\"styles_bottom__1__MR\",\"favouriteBlock\":\"styles_favouriteBlock__292ej\",\"commentsView\":\"styles_commentsView__1HPS1\",\"commentBlock\":\"styles_commentBlock__24VMh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"styles_registerBlock__3AiaD\",\"registerCard\":\"styles_registerCard__2r8jo\",\"inputWrap\":\"styles_inputWrap__16yZb\",\"input\":\"styles_input__3__5_\",\"btnWrap\":\"styles_btnWrap__2dgHW\",\"formBtn\":\"styles_formBtn__25hRU\",\"textBlock\":\"styles_textBlock__8MDyd\",\"Text\":\"styles_Text__3VKVr\",\"Title\":\"styles_Title__3_9ho\",\"redirectBlock\":\"styles_redirectBlock__3s75R\",\"signBtn\":\"styles_signBtn__3fSYp\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, {AxiosRequestConfig} from \"axios\";\r\nimport {LoginParamsType, LogOutParamsType, RegisterParamsType} from \"./types/auth\";\r\nimport {ProfileResponse} from \"./types/profile\";\r\nimport {ChannelParams, PostParams} from \"./types/post\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://wires-api.herokuapp.com/v1/',\r\n})\r\ninstance.interceptors.request.use(function (config) {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    config.headers.Authorization = accessToken ? `Bearer ${accessToken}` : '';\r\n    return config\r\n})\r\n\r\nexport const profileAPI = {\r\n    setProfile() {\r\n        return instance.get(`/user`)\r\n    },\r\n    getProfileById(id: number) {\r\n        return instance.get(`/user/${id}`)\r\n    },\r\n    setProfilePosts(id: number, params: PostParams) {\r\n        return instance.get(`user/${id}/posts`, {\r\n            params: {\r\n                ...params\r\n            }\r\n        })\r\n    },\r\n    updateProfile(profileData: any) {\r\n        return instance.put('/user/update', profileData)\r\n    },\r\n    changePassword(params: { old_password_hash: any, new_password_hash: any }) {\r\n        return instance.put('/user/change_password', params)\r\n    },\r\n    searchProfile(value: string) {\r\n        return instance.get<null, ProfileResponse>(`user/search?query=${value}`)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    register(data: RegisterParamsType) {\r\n        return instance.post<RegisterParamsType, any>(`user/register`, data)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, any>(`user/login`, data).then(res => res.data.data)\r\n    },\r\n    logOut(data: LogOutParamsType) {\r\n        return instance.post<LogOutParamsType, AxiosRequestConfig>(`user/logout`, data)\r\n    },\r\n    me() {\r\n        return instance.get<null, ProfileResponse>(`user`)\r\n    },\r\n}\r\n\r\nexport const postsAPI = {\r\n    setPosts(params: PostParams) {\r\n        return instance.get<PostParams, any>('posts', {\r\n            params: {\r\n                ...params\r\n            }\r\n        })\r\n    },\r\n    deletePost(id: number) {\r\n        return instance.delete<PostParams, any>(`posts/${id}`)\r\n    },\r\n    switchIsLikedStatus(id: number, likedStatus: boolean) {\r\n        return instance.post(`posts/${id}/like?is_liked=${likedStatus}`)\r\n    },\r\n    setPostComments(id: number, params: PostParams) {\r\n        return instance.get(`posts/${id}/comment`, {\r\n            params: {\r\n                ...params\r\n            }\r\n        })\r\n    },\r\n    addPostComment(id: number, text: string) {\r\n        debugger\r\n        return instance.post(`posts/${id}/comment`, {text})\r\n    },\r\n    createPost(params: any) {\r\n        return instance.post('posts/create', params)\r\n    },\r\n    updatePost(id: number, params: any) {\r\n        return instance.put(`posts/${id}`, params)\r\n    }\r\n\r\n}\r\n\r\nexport const chatAPI = {\r\n    setChannels() {\r\n        return instance.get('channels')\r\n    },\r\n    createChannel(params:any) {\r\n        return instance.post('channels/create',params)\r\n    },\r\n    fetchMessagesById(id: number, params: ChannelParams) {\r\n        return instance.get(`channels/${id}/messages`, {\r\n            params: {\r\n                ...params\r\n            }\r\n        })\r\n    },\r\n    startMessagesListening(id: number) {\r\n        const ws = new WebSocket(\r\n            `ws://wires-api.herokuapp.com/v1/channels/${id}/listen`\r\n        );\r\n        ws.onopen = function (e) {\r\n            alert(\"[open] Соединение установлено\");\r\n            alert(\"Отправляем данные на сервер\");\r\n            console.log(e)\r\n            ws.send(JSON.stringify({\r\n                text: \"client1\"\r\n            }));\r\n        };\r\n\r\n\r\n    },\r\n}\r\n\r\n\r\n","import {getUserProfileAT} from \"./ProfileReducer\";\r\nimport {setLoggedInActionType} from \"./AuthReducer\";\r\n\r\n\r\nconst initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n    isAuth:false\r\n}\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case 'APP/SET-IS-AUTH':\r\n            return {...state, isAuth: action.isAuth}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionCreators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\nexport const setIsAuthAC = (isAuth: boolean) => ({type: 'APP/SET-IS-AUTH', isAuth} as const)\r\n\r\n//type\r\nexport type AppInitialStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedAC = ReturnType<typeof setIsInitializedAC>\r\nexport type SetIsAuthAC = ReturnType<typeof setIsAuthAC>\r\nexport type AppActionsType =\r\n    SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetIsInitializedAC\r\n    | getUserProfileAT\r\n    | setLoggedInActionType\r\n| ReturnType<typeof setIsAuthAC>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'react';\r\nimport {\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType, SetIsAuthAC,\r\n    setIsAuthAC,\r\n    SetIsInitializedAC,\r\n    setIsInitializedAC\r\n} from \"./appReducer\";\r\nimport {LoginParamsType, LoginResponse, LogOutParamsType} from \"../api/types/auth\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    loginError: '',\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-ERROR':\r\n            return {...state, loginError: action.errorValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionCreators\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\nexport const setErrorAc = (errorValue: string) => ({type: 'login/SET-ERROR', errorValue} as const)\r\n\r\n//thunks\r\nexport const getAuthData = () => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authAPI.me()\r\n        dispatch(setIsInitializedAC(true))\r\n        dispatch(setIsAuthAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message)\r\n        dispatch(setAppErrorAC(error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    } finally {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\nexport const login = (data: LoginParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res: LoginResponse = await authAPI.login(data)\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setIsAuthAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        localStorage.setItem('access_token', res.access_token)\r\n        localStorage.setItem('refresh_token', res.refresh_token)\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setErrorAc(error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const logout = (data: LogOutParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.logOut(data)\r\n        console.log(res)\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setIsAuthAC(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        localStorage.removeItem('access_token')\r\n        localStorage.removeItem('refresh_token')\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n//type\r\ntype InitialStateType = typeof initialState\r\ntype SetErrorActionType = ReturnType<typeof setErrorAc>\r\nexport type setLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\ntype ActionsType =\r\n    setLoggedInActionType\r\n    | SetAppStatusActionType\r\n    | SetErrorActionType\r\n    | SetAppErrorActionType\r\n    | SetIsInitializedAC\r\n    | SetIsAuthAC\r\n    | ReturnType<typeof setIsAuthAC>\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {AppRootType} from \"./redux-store\";\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {ProfileResponse, UpdateProfileParams} from \"../api/types/profile\";\r\nimport {CommentType, Post, PostParams} from \"../api/types/post\";\r\nimport {postsAPI, profileAPI} from \"../api/api\";\r\nimport {setAppStatusAC, SetIsAuthAC, setIsAuthAC} from \"./appReducer\";\r\nimport {setErrorAc, setIsLoggedInAC, setLoggedInActionType} from \"./AuthReducer\";\r\nimport {toast} from \"react-hot-toast\";\r\n\r\nconst initialState = {\r\n    profile: {} as ProfileResponse,\r\n    posts: [] as Post[],\r\n    userId: null as number | null\r\n}\r\n\r\nexport const profileReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-USER-PROFILE\": {\r\n            return {...state, profile: action.payload}\r\n        }\r\n        case \"PROFILE/SET-PROFILE-POSTS\": {\r\n            return {...state, posts: action.payload}\r\n        }\r\n        case \"PROFILE/SET-POST-COMMENT\": {\r\n            debugger\r\n            return {...state, posts: state.posts.map(p=>p.id===action.id ? {...p,comments:action.payload} : p)}\r\n        }\r\n        case \"PROFILE/FILTER-PROFILE-POSTS\": {\r\n            debugger\r\n            return {...state, posts: state.posts.filter(f=>f.id!==action.id)}\r\n        }\r\n        case \"PROFILE/SET-AUTH-ID\": {\r\n            return {...state, userId: action.id}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const getUserProfile = (payload: ProfileResponse) => {\r\n    return {\r\n        type: \"PROFILE/SET-USER-PROFILE\",\r\n        payload\r\n    } as const\r\n}\r\nexport const getProfilePostsAC = (payload: Post[]) => {\r\n    return {\r\n        type: \"PROFILE/SET-PROFILE-POSTS\",\r\n        payload\r\n    } as const\r\n}\r\nexport const filterProfilePostsAC = (id: number) => {\r\n    return {\r\n        type: \"PROFILE/FILTER-PROFILE-POSTS\",\r\n        id\r\n    } as const\r\n}\r\nexport const setAuthIdAC = (id: number) => {\r\n    return {\r\n        type: \"PROFILE/SET-AUTH-ID\",\r\n        id\r\n    } as const\r\n}\r\n\r\nconst setPostComments = (id:number,payload:CommentType[]) => {\r\n    debugger\r\n    return {\r\n        type: \"PROFILE/SET-POST-COMMENT\",\r\n        id,\r\n        payload\r\n    } as const\r\n}\r\n\r\n//thunks\r\nexport const getProfile = (): ThunkType => async (dispatch: Dispatch, getState: () => AppRootType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await profileAPI.setProfile()\r\n        dispatch(getUserProfile(res.data.data))\r\n        dispatch(setAuthIdAC(res.data.data.id))\r\n\r\n        // @ts-ignore\r\n        dispatch(getProfilePosts(getState().profilePage.profile.id, {limit: 100, offset: 0}))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const getProfilePostComments = (id:number,params:PostParams) => async (dispatch: Dispatch) => {\r\n    debugger\r\n    try {\r\n        const res =await postsAPI.setPostComments(id,params)\r\n        dispatch(setPostComments(id,res.data.data))\r\n\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const getProfileById = (id: number) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        debugger\r\n        const res = await profileAPI.getProfileById(id)\r\n        // @ts-ignore\r\n        dispatch(getProfilePosts(id, {limit: 100, offset: 0}))\r\n        dispatch(getUserProfile(res.data.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const getProfilePosts = (id: number, params: PostParams) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await profileAPI.setProfilePosts(id, params)\r\n        dispatch(getProfilePostsAC(res.data.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profileData: UpdateProfileParams) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const formData = new FormData()\r\n    formData.append('update_params', JSON.stringify(profileData))\r\n    // avatarImg && formData.append('avatar', JSON.stringify(someStr))\r\n    try {\r\n        await profileAPI.updateProfile(formData)\r\n        // @ts-ignore\r\n        dispatch(getProfile())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setIsAuthAC(false))\r\n        dispatch(setIsLoggedInAC(false))\r\n        console.log(e)\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const updateProfileImage = (imageData: any) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const formData = new FormData()\r\n    formData.append('avatar', imageData.avatar)\r\n    try {\r\n        await profileAPI.updateProfile(formData)\r\n        // @ts-ignore\r\n        dispatch(getProfile())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        // dispatch(setIsAuthAC(false))\r\n        // dispatch(setIsLoggedInAC(false))\r\n        console.log(e)\r\n        toast.error('что-то пошло не так')\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const changeProfilePassword = (profileData: { old_password_hash: any, new_password_hash: any }) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await profileAPI.changePassword(profileData)\r\n        // @ts-ignore\r\n        dispatch(getProfile())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        toast.success('Пороль успешно изменен')\r\n    } catch (e) {\r\n        dispatch(setIsAuthAC(false))\r\n        dispatch(setIsLoggedInAC(false))\r\n        console.log(e)\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const searchProfile = (value: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await profileAPI.searchProfile(value)\r\n        dispatch(getUserProfile(res))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setIsAuthAC(false))\r\n        dispatch(setIsLoggedInAC(false))\r\n        console.log(e)\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype initialStateType = typeof initialState\r\nexport type getUserProfileAT = ReturnType<typeof getUserProfile>\r\n\r\nexport type FilterProfilePostsAT = ReturnType<typeof filterProfilePostsAC>\r\n\r\ntype ActionsType =\r\n    getUserProfileAT\r\n    | ReturnType<typeof getProfilePostsAC>\r\n    | ReturnType<typeof setAuthIdAC>\r\n    | SetIsAuthAC\r\n    | setLoggedInActionType\r\n    | ReturnType<typeof setPostComments>\r\n    | FilterProfilePostsAT\r\n\r\n\r\ntype ThunkType = ThunkAction<any, AppRootType, {}, ActionsType>\r\n","import {Dispatch} from 'redux';\r\nimport {RegisterParamsType} from \"../api/types/auth\";\r\nimport {authAPI} from \"../api/api\";\r\nimport { setAppStatusAC } from './appReducer';\r\n\r\n\r\nconst initialStateRegistration: RegistrationType = {\r\n    isRegistration: false,\r\n    error: ''\r\n}\r\n\r\nexport const registrationReducer = (state: RegistrationType = initialStateRegistration, action: ActionsType): RegistrationType => {\r\n    switch (action.type) {\r\n        case 'REGISTRATION/NEW-USER-CREATED':\r\n            return {...state, isRegistration: action.isRegistration, error: ''}\r\n        case 'REGISTRATION/SET-ERROR':\r\n            return {...state, error: action.value};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionCreators\r\nexport const registrationAC = (isRegistration: boolean) =>\r\n    ({type: 'REGISTRATION/NEW-USER-CREATED', isRegistration} as const)\r\nexport const setErrorAC = (value: string) =>\r\n    ({type: 'REGISTRATION/SET-ERROR', value} as const)\r\n\r\n//thunk\r\nexport const registrationTC = (data: RegisterParamsType) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authAPI.register(data)\r\n        dispatch(registrationAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message)\r\n        dispatch(setErrorAC(error))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        setTimeout(() => {\r\n            dispatch(setAppStatusAC('idle'))\r\n        }, 3000)\r\n    }\r\n}\r\n\r\n//types\r\ntype RegistrationType = {\r\n    isRegistration: boolean\r\n    error: string\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof registrationAC> | ReturnType<typeof setErrorAC>\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {AppRootType} from \"./redux-store\";\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AddPostParams, CommentType, Post, PostParams} from \"../api/types/post\";\r\nimport {postsAPI} from \"../api/api\";\r\nimport {setAppStatusAC} from \"./appReducer\";\r\nimport {setErrorAc} from \"./AuthReducer\";\r\nimport {filterProfilePostsAC, FilterProfilePostsAT, getProfilePosts} from \"./ProfileReducer\";\r\n\r\nconst initialState = {\r\n    posts: [] as Post[],\r\n}\r\n\r\n\r\nexport const postsReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"POSTS/SET-POSTS\": {\r\n            return {...state, posts: action.payload}\r\n        }\r\n        case \"POSTS/SET-IS_LIKED_STATUS\": {\r\n            return {...state, posts: state.posts.map(p=>p.id===action.id ? {...p,is_user_liked:action.likedStatus,likes_count:action.likedStatus ? p.likes_count+1 : p.likes_count-1} : p)}\r\n        }\r\n        case \"POSTS/SET-POST-COMMENT\": {\r\n            return {...state, posts: state.posts.map(p=>p.id===action.id ? {...p,comments:action.payload} : p)}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPosts = (payload: Post[]) => {\r\n    return {\r\n        type: \"POSTS/SET-POSTS\",\r\n        payload\r\n    } as const\r\n}\r\n const setIsLikedStatus = (id:number,likedStatus:boolean) => {\r\n    return {\r\n        type: \"POSTS/SET-IS_LIKED_STATUS\",\r\n        id,likedStatus\r\n    } as const\r\n}\r\nconst setPostComments = (id:number,payload:CommentType[]) => {\r\n    return {\r\n        type: \"POSTS/SET-POST-COMMENT\",\r\n        id,\r\n        payload\r\n    } as const\r\n}\r\n\r\n//thunks\r\nexport const getPosts = (params:PostParams) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res =await postsAPI.setPosts(params)\r\n        dispatch(setPosts(res.data.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const removePost = (id:number) => async (dispatch: Dispatch,getState:()=>AppRootType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await postsAPI.deletePost(id)\r\n        // @ts-ignore\r\n        dispatch(getPosts({limit: 10, offset: 0}))\r\n        dispatch(filterProfilePostsAC(id))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const changeLikesStatus = (id:number,likedStatus:boolean) => async (dispatch: Dispatch) => {\r\n    try {\r\n        await postsAPI.switchIsLikedStatus(id,likedStatus)\r\n        dispatch(setIsLikedStatus(id,likedStatus))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const getPostsComments = (id:number,params:PostParams) => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        const res =await postsAPI.setPostComments(id,params)\r\n        dispatch(setPostComments(id,res.data.data))\r\n\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const addPostComment = (id:number,text:string): ThunkType => async (dispatch: Dispatch,getState: () => AppRootType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await postsAPI.addPostComment(id,text)\r\n        // @ts-ignore\r\n        dispatch(getPostsComments(id,{limit: 10, offset: 0}))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const addPost = (params:AddPostParams): ThunkType => async (dispatch: Dispatch,getState: () => AppRootType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    debugger\r\n    const addPostData = {\r\n            text: params.create_params.text,\r\n            topic: params.create_params.topic\r\n    }\r\n    const addImageData = {\r\n        image: params.image,\r\n    }\r\n    const formData= new FormData()\r\n    formData.append('create_params',JSON.stringify(addPostData))\r\n    // @ts-ignore\r\n    formData.append('image',addImageData.image)\r\n    try {\r\n        await postsAPI.createPost(formData)\r\n        // @ts-ignore\r\n        dispatch(getPosts({limit: 10, offset: 0}))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const updatePost = (id:number,params:AddPostParams): ThunkType => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const addPostData = {\r\n        text: params.create_params.text,\r\n        topic: params.create_params.topic\r\n    }\r\n    const formData= new FormData()\r\n    formData.append('update_params',JSON.stringify(addPostData))\r\n    try {\r\n        await postsAPI.updatePost(id,formData)\r\n        // @ts-ignore\r\n        dispatch(getPosts({limit: 10, offset: 0}))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n//types\r\ntype initialStateType = typeof initialState\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setPosts>\r\n    | ReturnType<typeof setIsLikedStatus>\r\n    | ReturnType<typeof setPostComments>\r\n    | FilterProfilePostsAT\r\n\r\n\r\ntype ThunkType = ThunkAction<any, AppRootType, {}, ActionsType>\r\n","import {chatAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./appReducer\";\r\nimport {ChannelMessage, ChannelsResponse, CreateChannelParams} from \"../api/types/channels\";\r\nimport {setErrorAc} from \"./AuthReducer\";\r\nimport {ChannelParams} from \"../api/types/post\";\r\n\r\nconst initialState = {\r\n    channels: [] as ChannelsResponse[],\r\n    messages:[] as ChannelMessage[]\r\n}\r\n\r\nexport const chatReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHANNELS/SET-CHANNELS':\r\n            return { ...state, channels: action.payload }\r\n        case \"CHANNELS/SET-CHANNEL-MESSAGES\": {\r\n            return {...state, messages: action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setChannels = (payload: ChannelsResponse[]) => {\r\n    return {\r\n        type: \"CHANNELS/SET-CHANNELS\",\r\n        payload\r\n    } as const\r\n}\r\nexport const setChannelMessages = (payload: ChannelMessage[]) => {\r\n    return {\r\n        type: \"CHANNELS/SET-CHANNEL-MESSAGES\",\r\n        payload\r\n    } as const\r\n}\r\n\r\n//thunks\r\nexport const getChannels = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await chatAPI.setChannels()\r\n        console.log(res.data.data)\r\n        dispatch(setChannels(res.data.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const createChannel = (params:CreateChannelParams) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const createParamsData = {\r\n        name: params.create_params.name,\r\n        type: params.create_params.type,\r\n        members_ids:params.create_params.members_ids\r\n    }\r\n    const addImageData = {\r\n        image: params.image,\r\n    }\r\n    const formData= new FormData()\r\n    formData.append('create_params',JSON.stringify(createParamsData))\r\n    // @ts-ignore\r\n    formData.append('image',addImageData.image)\r\n    try {\r\n        await chatAPI.createChannel(formData)\r\n        // @ts-ignore\r\n        dispatch(getChannels())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const getMessagesById = (id:number,params:ChannelParams) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await chatAPI.fetchMessagesById(id,params)\r\n        console.log(res.data.data)\r\n        dispatch(setChannelMessages(res.data.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setErrorAc(e.response.error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const startMessagesListening = (id:number) => async (dispatch:Dispatch) => {\r\n    chatAPI.startMessagesListening(id)\r\n\r\n}\r\n\r\n\r\n//type\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setChannels>\r\n    | ReturnType<typeof setChannelMessages>\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore, Store } from \"redux\";\r\nimport { profileReducer } from \"./ProfileReducer\";\r\nimport { authReducer } from \"./AuthReducer\";\r\nimport thunk from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { appReducer } from \"./appReducer\";\r\nimport { registrationReducer } from \"./registrationReducer\";\r\nimport { postsReducer } from \"./PostsReducer\";\r\nimport { chatReducer } from \"./ChatReducer\";\r\n\r\nlet reducers = combineReducers({    //special function to combine reducers\r\n    profilePage: profileReducer,          // create an obj, with property profileReducer and value profileReducer\r\n    postsReducer: postsReducer,          // create an obj, with property profileReducer and value profileReducer\r\n    auth: authReducer,\r\n    registration: registrationReducer,\r\n    chat: chatReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type AppRootType = ReturnType<typeof reducers>\r\nlet store: Store = createStore(reducers, applyMiddleware(thunk));\r\n\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\nexport default store;\r\n\r\n","import React from \"react\";\r\nimport s from \"./styles.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\r\nimport MarkAsUnreadIcon from \"@mui/icons-material/MarkAsUnread\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport ChatIcon from '@mui/icons-material/Chat';\r\nconst Sidebar = () => {\r\n  return (\r\n    <nav className={s.sidebar}>\r\n      <ul className={s.sidebarList}>\r\n        <li className={s.sidebarItem}>\r\n          <NavLink activeClassName={s.activeLink} to=\"/profile\">\r\n            <AccountCircleIcon\r\n              className={s.logoIcon}\r\n              fontSize={\"large\"}\r\n            />\r\n          </NavLink>{\" \"}\r\n        </li>\r\n        <li className={s.sidebarItem}>\r\n          <NavLink\r\n            className={s.sidebarLink}\r\n            activeClassName={s.activeLink}\r\n            to=\"/posts\"\r\n          >\r\n            <MarkAsUnreadIcon\r\n              className={s.logoIcon}\r\n              fontSize={\"large\"}\r\n            />\r\n          </NavLink>{\" \"}\r\n        </li>\r\n        <li className={s.sidebarItem}>\r\n          <NavLink\r\n            className={s.sidebarLink}\r\n            activeClassName={s.activeLink}\r\n            to=\"/channels\"\r\n          >\r\n            <ChatIcon\r\n              className={s.logoIcon}\r\n              fontSize={\"large\"}\r\n            />\r\n          </NavLink>{\" \"}\r\n        </li>\r\n        <li className={s.sidebarItem}>\r\n          <NavLink\r\n            className={s.sidebarLink}\r\n            activeClassName={s.activeLink}\r\n            to=\"/settings\"\r\n          >\r\n            <SettingsIcon\r\n              className={s.logoIcon}\r\n              fontSize={\"large\"}\r\n            />\r\n          </NavLink>{\" \"}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport FetchingIcon from \"../../assets/images/users/loading-icon.jpg\";\r\nimport s from './styles.module.scss';\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.preloader} style={{backgroundColor: 'white'}}>\r\n            <div className={s.imgWrap}>\r\n                <svg width=\"50\" height=\"50\" viewBox=\"0 0 40 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M28.8503 1.39767C26.5897 8.19932 20.0589 8.10254 17.0761 7.20395C15.9458 13.8397 17.8611 18.6783 18.96 20.2681C26.4955 16.2866 28.6934 6.02887 28.8503 1.39767Z\" fill=\"white\"/>\r\n                    <path d=\"M25.3177 20.268C26.0713 28.2309 22.8059 34.7837 21.079 37.0648C33.3242 34.5764 38.7403 19.8533 39.9178 12.8028C36.9036 20.9316 28.9285 21.1666 25.3177 20.268Z\" fill=\"white\"/>\r\n                    <path d=\"M13.0531 12.9937C7.36196 13.2987 2.5391 9.59415 0.839054 7.70376C2.89048 19.5212 11.2012 27.3294 15.1002 29.7564C12.0129 26.2316 12.4491 17.1126 13.0531 12.9937Z\" fill=\"white\"/>\r\n                    <ellipse rx=\"2.11056\" ry=\"1.87625\" transform=\"matrix(0.985462 -0.169896 0.217026 0.976166 7.58626 6.75186)\" fill=\"white\"/>\r\n                    <ellipse cx=\"21.7857\" cy=\"2.22724\" rx=\"2.11936\" ry=\"1.8663\" fill=\"white\"/>\r\n                    <ellipse cx=\"32.618\" cy=\"15.4987\" rx=\"2.11936\" ry=\"1.8663\" fill=\"white\"/>\r\n                </svg>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}","export const Paths={\r\n\r\n}\r\nexport const device_id ='123qwe'","import React from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport s from \"./styles.module.scss\";\r\nimport EmojiPeopleIcon from \"@mui/icons-material/EmojiPeople\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootType } from \"../../redux/redux-store\";\r\nimport { Button } from \"@mui/material\";\r\nimport { logout } from \"../../redux/AuthReducer\";\r\nimport { device_id } from \"../../utils/constants\";\r\n\r\nfunction Header() {\r\n  const isAuth = useSelector<AppRootType, boolean>((state) => state.app.isAuth);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const logOutHandler = () => {\r\n    dispatch(logout({ device_id: device_id }));\r\n    history.push(\"/login\");\r\n  };\r\n  return (\r\n    <header className={s.header}>\r\n      <div\r\n        onClick={() => {\r\n          history.push(\"/profile\");\r\n        }}\r\n        className={s.logo}\r\n      >\r\n        <svg\r\n          width=\"50\"\r\n          height=\"50\"\r\n          viewBox=\"0 0 40 38\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            d=\"M28.8503 1.39767C26.5897 8.19932 20.0589 8.10254 17.0761 7.20395C15.9458 13.8397 17.8611 18.6783 18.96 20.2681C26.4955 16.2866 28.6934 6.02887 28.8503 1.39767Z\"\r\n            fill=\"white\"\r\n          />\r\n          <path\r\n            d=\"M25.3177 20.268C26.0713 28.2309 22.8059 34.7837 21.079 37.0648C33.3242 34.5764 38.7403 19.8533 39.9178 12.8028C36.9036 20.9316 28.9285 21.1666 25.3177 20.268Z\"\r\n            fill=\"white\"\r\n          />\r\n          <path\r\n            d=\"M13.0531 12.9937C7.36196 13.2987 2.5391 9.59415 0.839054 7.70376C2.89048 19.5212 11.2012 27.3294 15.1002 29.7564C12.0129 26.2316 12.4491 17.1126 13.0531 12.9937Z\"\r\n            fill=\"white\"\r\n          />\r\n          <ellipse\r\n            rx=\"2.11056\"\r\n            ry=\"1.87625\"\r\n            transform=\"matrix(0.985462 -0.169896 0.217026 0.976166 7.58626 6.75186)\"\r\n            fill=\"white\"\r\n          />\r\n          <ellipse\r\n            cx=\"21.7857\"\r\n            cy=\"2.22724\"\r\n            rx=\"2.11936\"\r\n            ry=\"1.8663\"\r\n            fill=\"white\"\r\n          />\r\n          <ellipse\r\n            cx=\"32.618\"\r\n            cy=\"15.4987\"\r\n            rx=\"2.11936\"\r\n            ry=\"1.8663\"\r\n            fill=\"white\"\r\n          />\r\n        </svg>\r\n\r\n        <span className={s.logoText}>Wires</span>\r\n      </div>\r\n\r\n      <div className={s.headerLogin}>\r\n        {isAuth ? (\r\n          <div>\r\n            <Button\r\n              variant={\"outlined\"}\r\n              onClick={logOutHandler}\r\n              className={s.loginBtn}\r\n            >\r\n              Выйти\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <NavLink to={\"/login\"}>Вход</NavLink>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Suspense } from \"react\";\r\n\r\n\r\nexport const WithSuspense = (Component:any) => {\r\n    return (props:any)=>{\r\n        return <Suspense fallback={<div>Loading...</div>}>\r\n                <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Avatar.7000ecdc.svg\";","export const toCorrectTime = (time: string, withoutSeconds: boolean) => {\r\n    let currentData = time.split(\"T\")[0]\r\n    let currentTime = time.split(\"T\")[1].split('.')[0]\r\n    if (withoutSeconds) {\r\n        currentTime = currentTime.substring(0, 5)\r\n    }\r\n    return `${currentData} ${currentTime}`\r\n}","import {FC, useState} from \"react\";\r\nimport s from './styles.module.scss';\r\nimport {toCorrectTime} from \"../../utils/toCorrectTime\";\r\n\r\ninterface Iprops {\r\n    firstName: string\r\n    lastName: string\r\n    image: string\r\n    time: string\r\n    text: string\r\n}\r\nexport const Comment:FC<Iprops>=({firstName,lastName,image,time,text})=>{\r\n\r\n    const titleStr= firstName && lastName ? `${firstName} ${lastName}` : 'Без имени'\r\n\r\n    return(\r\n        <div className={s.comment}>\r\n            <div className={s.commentTop}>\r\n                <img src={image} />\r\n                <div className={s.topText}>\r\n                    <h5 className={s.title}>{titleStr}</h5>\r\n                    <div className={s.time}>{toCorrectTime(time,true)}</div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.content}>{text}</div>\r\n\r\n        </div>\r\n    )\r\n}","import TextareaAutosize from \"@mui/material/TextareaAutosize\";\r\nimport React, {ChangeEventHandler, FC, useState, } from \"react\";\r\nimport s from './styles.module.scss';\r\nimport {Button} from \"@mui/material\";\r\ninterface Iprops {\r\n    addComment:(text:string)=>void\r\n}\r\n\r\nexport const AddComment:FC<Iprops> =({addComment})=>{\r\n\r\n    const [inputText,setInputText]=useState('')\r\n\r\n    const sendCommentText=()=>{\r\n        addComment(inputText)\r\n        setInputText('')\r\n    }\r\n\r\n    return(\r\n        <div className={s.block}>\r\n            <h5>Добавить комментарий</h5>\r\n            <div className={s.inputWrap}>\r\n                <textarea\r\n                    aria-label=\"empty textarea\"\r\n                    placeholder={'Введите комментарий'}\r\n                    onChange={(e)=>setInputText(e.currentTarget.value)}\r\n                    value={inputText}\r\n                />\r\n            </div>\r\n            <Button variant={'contained'} className={s.sendBtn} onClick={sendCommentText}>Отправить</Button>\r\n        </div>\r\n    )\r\n}","export const topics:ITopic[] = [\r\n    {\r\n        value: 'WEB_DEVELOPMENT',\r\n        label: 'Web',\r\n    },\r\n    {\r\n        value: 'DATA_SCIENCE',\r\n        label: 'Data Science',\r\n    },\r\n    {\r\n        value: 'ANDROID_DEVELOPMENT',\r\n        label: 'Android',\r\n    },\r\n    {\r\n        value: 'IOS_DEVELOPMENT',\r\n        label: 'IOS',\r\n    },\r\n    {\r\n        value: 'QUALITY_ASSISTANCE',\r\n        label: 'QA',\r\n    },\r\n    {\r\n        value: 'DESIGN',\r\n        label: 'UX/UI',\r\n    }\r\n]\r\n\r\nexport interface ITopic {\r\n    value: string,\r\n    label: string\r\n}","import Modal from \"@mui/material/Modal/Modal\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    MenuItem,\r\n    Select,\r\n    SelectChangeEvent,\r\n    TextField,\r\n} from \"@mui/material\";\r\n\r\nimport s from \"./styles.module.scss\";\r\nimport {ChangeEvent, FC, useRef, useState} from \"react\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport {topics} from \"../../utils/topics\";\r\n\r\ninterface IProps {\r\n    title: string;\r\n    handleClose: () => void;\r\n    isOpen: boolean;\r\n    addPost?: (params: any) => void;\r\n    editPost?: (params: any) => void;\r\n    postText?: string;\r\n    postTopic?: string;\r\n}\r\n\r\ninterface InitialValuesType {\r\n    text: string;\r\n    topic: string;\r\n}\r\n\r\n\r\n\r\nexport const PostModal: FC<IProps> = ({\r\n                                          title,\r\n                                          handleClose,\r\n                                          isOpen,\r\n                                          addPost,\r\n                                          editPost,\r\n                                          postText,\r\n                                          postTopic,\r\n                                          children,\r\n                                      }) => {\r\n    const [topic, setTopic] = useState(\"\");\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n    const [file, setFile] = useState<any>();\r\n\r\n    const upload = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newFile = e.target.files && e.target.files[0]; //достаем из таргета файлы, если файлы есть - прилетает массив, откуда достаем 0\r\n        if (newFile) {\r\n            setFile(newFile);\r\n        }\r\n    };\r\n    const handleChange = (event: SelectChangeEvent) => {\r\n        setTopic(event.target.value as string);\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: postText ? postText : \"\",\r\n            topic: postTopic ? postTopic : \"\",\r\n        } as InitialValuesType,\r\n        validate: (values: InitialValuesType) => {\r\n            let errors: FormikErrors<InitialValuesType> = {};\r\n            if (!values.topic) {\r\n                errors.topic = 'Required';\r\n            }\r\n            if (!values.text) {\r\n                errors.text = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            debugger\r\n            if (addPost) {\r\n                addPost({\r\n                    create_params: {\r\n                        text: values.text,\r\n                        topic: values.topic,\r\n                    },\r\n                    image: file\r\n                });\r\n            }\r\n            if (editPost) {\r\n                editPost({\r\n                    create_params: {\r\n                        text: values.text,\r\n                        topic: values.topic,\r\n                    },\r\n                    // image: ''\r\n                });\r\n            }\r\n\r\n            handleClose();\r\n        },\r\n    });\r\n    return (\r\n        <Modal open={isOpen} onClose={handleClose}>\r\n            <Box className={s.modalBlock}>\r\n                <div className={s.top}>\r\n                    <h2 className={s.title}>\r\n                        {title}\r\n                        <button\r\n                            className={s.cancelBtn}\r\n                            onClick={() => {\r\n                                handleClose();\r\n                            }}\r\n                        >\r\n                            <svg\r\n                                width=\"14\"\r\n                                fill={\"red\"}\r\n                                height=\"14\"\r\n                                viewBox=\"0 0 14 14\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                            >\r\n                                <path d=\"M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z\" />\r\n                            </svg>\r\n                        </button>\r\n                    </h2>\r\n                </div>\r\n                <div className={s.content}>\r\n                    {children ? (\r\n                        children\r\n                    ) : (\r\n                        <form onSubmit={formik.handleSubmit} className={s.form}>\r\n                            <div className={s.textAreaWrap}>\r\n                                <h6>Введите текст поста</h6>\r\n                                <TextField\r\n                                    className={s.textArea}\r\n                                    placeholder={\"Введите текст\"}\r\n                                    name=\"text\"\r\n                                    type=\"text\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.text}\r\n                                    style={formik.errors.text ? {border:'2px solid red'} : {}}\r\n                                />\r\n\r\n                        </div>\r\n                            <div className={s.selectWrap}>\r\n                                <h6>Выберите интерес</h6>\r\n                                <Select\r\n                                    className={s.select}\r\n                                    placeholder={\"Выберите интерес\"}\r\n                                    value={topic}\r\n                                    name=\"topic\"\r\n                                    style={formik.errors.topic ? {border:'2px solid red'} : {}}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                        formik.handleChange(e);\r\n                                    }}\r\n                                >\r\n                                    {topics.map((topic, index) => {\r\n                                        return (\r\n                                            <MenuItem value={topic.value} key={index}>\r\n                                                {topic.label}\r\n                                            </MenuItem>\r\n                                        );\r\n                                    })}\r\n                                </Select>\r\n                            </div>\r\n                            <div className={s.inputWrap}>\r\n                                <TextField\r\n                                    className={s.imageInput}\r\n                                    type=\"file\"\r\n                                    name=\"image\"\r\n                                    onChange={upload}\r\n                                    ref={inRef}\r\n                                />\r\n                            </div>\r\n                            <div className={s.btnWrap}>\r\n                                <Button variant={\"contained\"} type=\"submit\">\r\n                                    Отправить\r\n                                </Button>\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </div>\r\n            </Box>\r\n        </Modal>\r\n    );\r\n};","export const changeTopicLabel =(topicToChange:string)=>{\r\n    let label='' as string;\r\n   switch (topicToChange){\r\n       case 'WEB_DEVELOPMENT': {\r\n           label='Web'\r\n           break\r\n       }\r\n       case 'DATA_SCIENCE': {\r\n           label='Data Science'\r\n           break\r\n       }\r\n       case 'ANDROID_DEVELOPMENT': {\r\n           label='Android'\r\n           break\r\n       }\r\n       case 'IOS_DEVELOPMENT': {\r\n           label='IOS'\r\n           break\r\n       }\r\n       case 'QUALITY_ASSISTANCE': {\r\n           label='QA'\r\n           break\r\n       }\r\n       case 'DESIGN': {\r\n           label='UX/UI'\r\n           break\r\n       }\r\n       default:{\r\n           label=topicToChange\r\n       }\r\n   }\r\n\r\n    return label\r\n}","import { FC, useState } from \"react\";\r\nimport s from \"./styles.module.scss\";\r\nimport { IconButton, Paper } from \"@mui/material\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport { Comment } from \"../../../components/comment/Comment\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  addPostComment,\r\n  getPostsComments,\r\n  removePost,\r\n  updatePost,\r\n} from \"../../../redux/PostsReducer\";\r\nimport { AddPostParams, CommentType } from \"../../../api/types/post\";\r\nimport { AddComment } from \"../../../components/addComment/AddComment\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { toCorrectTime } from \"../../../utils/toCorrectTime\";\r\nimport { PostModal } from \"../../../components/postModal/PostModal\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport CommentIcon from \"@mui/icons-material/Comment\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AppRootType } from \"../../../redux/redux-store\";\r\nimport { getProfilePostComments } from \"../../../redux/ProfileReducer\";\r\nimport Avatar from \"./../../../assets/Avatar.svg\";\r\nimport {changeTopicLabel} from \"../../../utils/changeTopicLabel\";\r\n\r\ninterface IProps {\r\n  firstName: string;\r\n  lastName: string;\r\n  image: string;\r\n  text: string;\r\n  postImage: string;\r\n  topic: string;\r\n  time: string;\r\n  isLiked: boolean;\r\n  likesCount: number;\r\n  changeIsLikedStatus: (id: number, likedStatus: boolean) => void;\r\n  id: number;\r\n  commentsCount: number;\r\n  comments?: CommentType[];\r\n  isPostsPage?: boolean;\r\n  userId: number;\r\n}\r\n\r\nexport const ProfilePost: FC<IProps> = ({\r\n  firstName,\r\n  lastName,\r\n  image,\r\n  text,\r\n  postImage,\r\n  topic,\r\n  time,\r\n  isLiked,\r\n  likesCount,\r\n  changeIsLikedStatus,\r\n  id,\r\n  commentsCount,\r\n  comments,\r\n  isPostsPage,\r\n  userId,\r\n}) => {\r\n  const [likedStatus, setLikedStatus] = useState(isLiked);\r\n  const [openComments, setOpenComments] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const currentUserId = useSelector<AppRootType, number | null>(\r\n    (state) => state.profilePage.userId\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const changeStatusHandler = () => {\r\n    setLikedStatus(!likedStatus);\r\n    changeIsLikedStatus(id, !likedStatus);\r\n  };\r\n  const getCommentsHandler = () => {\r\n    setOpenComments(!openComments);\r\n    if (isPostsPage) {\r\n      dispatch(getPostsComments(id, { limit: 100, offset: 0 }));\r\n    }\r\n    if (!isPostsPage) {\r\n      dispatch(getProfilePostComments(id, { limit: 100, offset: 0 }));\r\n    }\r\n  };\r\n  const addComment = (text: string) => {\r\n    debugger;\r\n    dispatch(addPostComment(id, text));\r\n  };\r\n  const remoPostHandler = () => {\r\n    dispatch(removePost(id));\r\n  };\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const editPostHandler = (params: AddPostParams) => {\r\n    dispatch(updatePost(id, params));\r\n  };\r\n  return (\r\n    <Paper className={s.post}>\r\n      <div className={s.inner}>\r\n        <div className={s.top}>\r\n          {isPostsPage ? (\r\n            <NavLink to={`profile/${userId}`}>\r\n              <img src={image ? image : Avatar} alt=\"userImage\"/>{\" \"}\r\n            </NavLink>\r\n          ) : (\r\n            <img src={image ? image : Avatar} alt=\"userImage\"/>\r\n          )}\r\n          <div className={s.topText}>\r\n            <h4 className={s.title}>\r\n              {isPostsPage ? (\r\n                <NavLink to={`profile/${userId}`}>\r\n                  <span>\r\n                    {firstName} {lastName}\r\n                  </span>{\" \"}\r\n                </NavLink>\r\n              ) : (\r\n                <span>\r\n                  {firstName} {lastName}\r\n                </span>\r\n              )}\r\n              { userId === currentUserId && (\r\n                <IconButton onClick={() => setOpen(true)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n              )}\r\n              { userId === currentUserId && (\r\n                <IconButton\r\n                  size=\"large\"\r\n                  onClick={remoPostHandler}\r\n                  className={s.removeBtn}\r\n                >\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              )}\r\n            </h4>\r\n            <div className={s.time}>{toCorrectTime(time, true)}</div>\r\n            <span className={s.topic}>{changeTopicLabel(topic)}</span>\r\n          </div>\r\n        </div>\r\n        <div className={s.content}>\r\n          <p className={s.text}>{text}</p>\r\n          {postImage && (\r\n            <div className={s.postImageWrap}>\r\n              <img className={s.postImage} src={postImage} alt=\"postImage\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={s.bottom}>\r\n        <div className={s.favouriteBlock}>\r\n          <IconButton onClick={changeStatusHandler} className={s.favouriteBtn}>\r\n            {likedStatus ? <FavoriteIcon /> : <FavoriteBorderIcon />}\r\n          </IconButton>\r\n          {likesCount > 0 ? <div>{likesCount}</div> : \"\"}\r\n        </div>\r\n        <div className={s.commentsView}>\r\n          <CommentIcon\r\n            className={s.commentBlock}\r\n            onClick={getCommentsHandler}\r\n          />\r\n          <span>{commentsCount > 0 ? <div>{commentsCount}</div> : \"\"}</span>\r\n        </div>\r\n      </div>\r\n      {openComments ? (\r\n        <div>\r\n          {comments && comments.length > 0\r\n            ? comments.map((c, index) => {\r\n                return (\r\n                  <Comment\r\n                    firstName={c?.author?.first_name}\r\n                    lastName={c?.author?.last_name}\r\n                    image={c?.author?.avatar?.url}\r\n                    time={c?.send_time}\r\n                    text={c?.text}\r\n                  />\r\n                );\r\n              })\r\n            : \"\"}\r\n          <AddComment addComment={addComment} />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <PostModal\r\n        title={\"Редактировать пост\"}\r\n        handleClose={handleClose}\r\n        isOpen={open}\r\n        editPost={editPostHandler}\r\n        postText={text}\r\n        postTopic={topic}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n","import Modal from \"@mui/material/Modal/Modal\"\r\nimport {Box, Button, Checkbox, FormControlLabel, SelectChangeEvent, TextField} from \"@mui/material\";\r\nimport s from './styles.module.scss';\r\nimport {FC, useState} from \"react\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport {topics} from \"../../utils/topics\";\r\n\r\ninterface IProps {\r\n    title: string\r\n    handleClose: () => void\r\n    isOpen: boolean\r\n    editProfile?: (params: any) => void\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    userName: string\r\n    profileInterests: string[]\r\n}\r\n\r\ninterface InitialValuesType {\r\n    username: string,\r\n    email: string,\r\n    first_name: string,\r\n    last_name: string,\r\n    // interests: string[],\r\n}\r\n\r\n\r\nexport const EditProfileModal: FC<IProps> = ({\r\n                                                 title,\r\n                                                 handleClose,\r\n                                                 isOpen,\r\n                                                 editProfile,\r\n                                                 email,\r\n                                                 lastName,\r\n                                                 firstName,\r\n                                                 userName, profileInterests\r\n                                             }) => {\r\n    const [interests, setInterests] = useState<string[]>(profileInterests)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: userName,\r\n            email: email,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n        } as InitialValuesType,\r\n        validate: (values: InitialValuesType) => {\r\n            let errors: FormikErrors<InitialValuesType> = {};\r\n            if (!values.username) {\r\n                errors.username = 'Заполните поле';\r\n            }\r\n            if (!values.first_name) {\r\n                errors.first_name = 'Заполните поле';\r\n            }\r\n            if (!values.last_name) {\r\n                errors.last_name = 'Заполните поле';\r\n            }\r\n            if (!values.email) {\r\n                errors.email = 'Заполните поле';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Неправильный email адрес';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            if (editProfile) {\r\n                editProfile({\r\n                    username: values.username,\r\n                    email: values.email,\r\n                    first_name: values.first_name,\r\n                    last_name: values.last_name,\r\n                    interests: interests,\r\n                })\r\n            }\r\n            handleClose()\r\n        },\r\n    });\r\n    return (\r\n        <Modal open={isOpen} onClose={handleClose}>\r\n            <Box className={s.modalBlock}>\r\n                <div className={s.top}>\r\n                    <h2 className={s.title}>{title}\r\n                        <button className={s.cancelBtn} onClick={() => {\r\n                            handleClose()\r\n                        }}>\r\n                            <svg width=\"14\" fill={'red'} height=\"14\" viewBox=\"0 0 14 14\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path\r\n                                    d=\"M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z\"\r\n                                />\r\n                            </svg>\r\n                        </button>\r\n                    </h2>\r\n\r\n                </div>\r\n                <div className={s.content}>\r\n                    <form onSubmit={formik.handleSubmit} className={s.form}>\r\n                        <div className={`${s.inputWrap} ${s.userName}`}>\r\n                            <h6>Никнэйм</h6>\r\n                            <TextField\r\n                                className={s.input}\r\n                                placeholder={'Введите никнэйм'}\r\n                                name=\"username\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.username}\r\n                                style={formik.errors.username ? {border:'2px solid red'} : {}}\r\n\r\n                            />\r\n                            {formik.errors.username && <span style={{color:'red'}}>{formik.errors.username}</span>}\r\n                        </div>\r\n                        <div className={`${s.inputWrap} ${s.email}`}>\r\n                            <h6>Почта</h6>\r\n                            <TextField\r\n                                className={s.input}\r\n                                placeholder={'Введите email'}\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.email}\r\n                                style={formik.errors.email ? {border:'2px solid red'} : {}}\r\n                            />\r\n                            {formik.errors.email && <span style={{color:'red'}}>{formik.errors.email}</span>}\r\n\r\n                        </div>\r\n                        <div className={`${s.inputWrap} ${s.firstName}`}>\r\n                            <h6>Имя</h6>\r\n                            <TextField\r\n                                className={s.input}\r\n                                placeholder={'Введите имя'}\r\n                                name=\"first_name\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.first_name}\r\n                                style={formik.errors.first_name ? {border:'2px solid red'} : {}}\r\n                            />\r\n                            {formik.errors.first_name && <span style={{color:'red'}}>{formik.errors.first_name}</span>}\r\n\r\n                        </div>\r\n                        <div className={`${s.inputWrap} ${s.lastName}`}>\r\n                            <h6>Фамилия</h6>\r\n                            <TextField\r\n                                className={s.input}\r\n                                placeholder={'Введите фамилию'}\r\n                                name=\"last_name\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.last_name}\r\n                                style={formik.errors.last_name ? {border:'2px solid red'} : {}}\r\n\r\n                            />\r\n                            {formik.errors.last_name && <span style={{color:'red'}}>{formik.errors.last_name}</span>}\r\n\r\n                        </div>\r\n                        <div className={s.checkboxWrap}>\r\n                            <h6>Выберите интересы</h6>\r\n                            <div className={s.checkboxes}>\r\n                                {\r\n                                    topics.map((topic, index) => {\r\n                                        return (\r\n                                            <FormControlLabel\r\n                                                value={topic.value}\r\n                                                checked={interests && interests.includes(topic.value)}\r\n                                                control={<Checkbox\r\n                                                    onChange={(e) => {\r\n                                                        if (e.currentTarget.checked) {\r\n                                                            setInterests([...interests,topic.value])\r\n                                                            console.log(interests)\r\n                                                        } else {\r\n                                                            setInterests(interests.filter(f=>f!==topic.value))\r\n                                                            console.log(interests)\r\n                                                        }\r\n                                                    }}/>}\r\n                                                label={topic.label}\r\n                                                labelPlacement=\"end\"\r\n\r\n                                            />\r\n\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.btnWrap}>\r\n                            <Button variant={'contained'} type=\"submit\">Отправить</Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Box>\r\n        </Modal>\r\n    )\r\n}","export const findLabelByValue = (values: string[]) => {\r\n    const labels = [] as string[]\r\n\r\n    if (values) {\r\n        values.forEach(topic => {\r\n            switch (topic) {\r\n                case 'WEB_DEVELOPMENT': {\r\n                    labels.push('Web')\r\n                    break\r\n                }\r\n                case 'DATA_SCIENCE': {\r\n                    labels.push('Data Science')\r\n                    break\r\n                }\r\n                case 'ANDROID_DEVELOPMENT': {\r\n                    labels.push('Android')\r\n                    break\r\n                }\r\n                case 'IOS_DEVELOPMENT': {\r\n                    labels.push('IOS')\r\n                    break\r\n                }\r\n                case 'QUALITY_ASSISTANCE': {\r\n                    labels.push('QA')\r\n                    break\r\n                }\r\n                case 'DESIGN': {\r\n                    labels.push('UX/UI')\r\n                    break\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n    } else return ['']\r\n    return labels\r\n}","import React, { FC, useEffect, useState } from \"react\";\r\nimport s from \"./styles.module.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getProfile,\r\n  getProfileById,\r\n  updateProfile,\r\n} from \"../../redux/ProfileReducer\";\r\nimport { AppRootType } from \"../../redux/redux-store\";\r\nimport { useHistory, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { Card, Container, Divider, IconButton } from \"@mui/material\";\r\nimport { ProfileResponse, UpdateProfileParams } from \"../../api/types/profile\";\r\nimport Avatar from \"./../../assets/Avatar.svg\";\r\nimport { Post } from \"../../api/types/post\";\r\nimport { ProfilePost } from \"./post/ProfilePost\";\r\nimport { EditProfileModal } from \"../../components/editProfileModal/EditProfileModal\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { RequestStatusType } from \"../../redux/appReducer\";\r\nimport { Preloader } from \"../../components/preloader/Preloader\";\r\nimport { topics } from \"../../utils/topics\";\r\nimport { findLabelByValue } from \"../../utils/findLabelByValue\";\r\n\r\ninterface IPropsType {}\r\n\r\nexport const Profile: FC<IPropsType> = () => {\r\n  const dispatch = useDispatch();\r\n  const profile = useSelector<AppRootType, ProfileResponse>(\r\n    (state) => state.profilePage.profile\r\n  );\r\n  const posts = useSelector<AppRootType, Post[]>(\r\n    (state) => state.profilePage.posts\r\n  );\r\n  const isAuth = useSelector<AppRootType, boolean>((state) => state.app.isAuth);\r\n  const history = useHistory();\r\n  const { userId } = useParams<any>();\r\n  const currentUserId = useSelector<AppRootType, number | null>(\r\n    (state) => state.profilePage.userId\r\n  );\r\n  const [open, setOpen] = useState(false);\r\n  const status = useSelector<AppRootType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  const router = useRouteMatch();\r\n\r\n  console.log(router.url);\r\n  useEffect(() => {\r\n    // if (!userId) {\r\n    //     dispatch(getProfile())\r\n    // }\r\n    if (userId) {\r\n      dispatch(getProfileById(userId));\r\n    }\r\n    if (router.url === \"/profile\") {\r\n      dispatch(getProfile());\r\n      console.log(\"dadada\");\r\n    }\r\n  }, [router.url]);\r\n\r\n  if (!isAuth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  const handleClose = () => setOpen(false);\r\n  const editProfile = (params: UpdateProfileParams) => {\r\n    dispatch(updateProfile(params));\r\n  };\r\n\r\n  if (status === \"loading\") {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <main className={s.profile}>\r\n      <Container>\r\n        <Card className={s.inner}>\r\n          <div className={s.top}>\r\n            <div className={s.topContainer}>\r\n              <img\r\n                src={profile?.avatar?.url ? profile.avatar.url : Avatar}\r\n                alt=\"userImage\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className={s.bottom}>\r\n            <div className={s.bottomContainer}>\r\n              <h1 className={s.title}>\r\n                <span>\r\n                  {profile.first_name} {profile.last_name}\r\n                </span>\r\n                {!userId && (\r\n                  <IconButton onClick={() => setOpen(true)}>\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n              </h1>\r\n              <span className={s.title}>@{profile.username}</span>\r\n            </div>\r\n          </div>\r\n          <div className={s.interests}>\r\n            <span>Интересы:</span>{\" \"}\r\n            {findLabelByValue(profile.interests).join(\", \")}\r\n          </div>\r\n        </Card>\r\n        <Divider />\r\n        <div className={s.posts}>\r\n          <h3 className={s.postsTitle}>Посты</h3>\r\n          <div className={s.postsWrap}>\r\n            {posts.map((card, index) => {\r\n              return (\r\n                <ProfilePost\r\n                  key={index}\r\n                  firstName={card?.author?.first_name}\r\n                  lastName={card?.author?.last_name}\r\n                  image={card?.author?.avatar?.url}\r\n                  text={card?.text}\r\n                  postImage={card?.image?.url}\r\n                  topic={card?.topic}\r\n                  time={card?.publish_time}\r\n                  isLiked={card?.is_user_liked}\r\n                  likesCount={card?.likes_count}\r\n                  changeIsLikedStatus={() => {}}\r\n                  id={card?.id}\r\n                  userId={card?.author.id}\r\n                  commentsCount={card?.comments_count}\r\n                  comments={card?.comments}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </Container>\r\n\r\n      <EditProfileModal\r\n        title={\"Редактировать профиль\"}\r\n        handleClose={handleClose}\r\n        isOpen={open}\r\n        editProfile={editProfile}\r\n        firstName={profile.first_name}\r\n        lastName={profile.last_name}\r\n        email={profile.email}\r\n        userName={profile.username}\r\n        profileInterests={profile.interests}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useEffect } from \"react\";\r\nimport { NavLink, Redirect, useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport SHA256 from \"crypto-js/sha256\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport AlternateEmailIcon from \"@mui/icons-material/AlternateEmail\";\r\nimport s from \"./styles.module.scss\";\r\nimport { login } from \"../../redux/AuthReducer\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { AppRootType } from \"../../redux/redux-store\";\r\nimport { device_id } from \"../../utils/constants\";\r\n\r\ninterface InitialValuesType {\r\n  email: string;\r\n  password_hash: string;\r\n}\r\n\r\nexport const Login: React.FC<any> = (props) => {\r\n  //hooks\r\n  const isAuth = useSelector<AppRootType, boolean>((state) => state.app.isAuth);\r\n\r\n  const dispatch = useDispatch();\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"test1@test.com\",\r\n      password_hash: \"123456\",\r\n    } as InitialValuesType,\r\n    validate: (values: InitialValuesType) => {\r\n      let errors: FormikErrors<InitialValuesType> = {};\r\n      if (!values.email) {\r\n        errors.email = 'Заполните поле';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Неправильный email адрес';\r\n      }\r\n      if (!values.password_hash) {\r\n        errors.password_hash = 'Введите пароль';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(\r\n        login({\r\n          email: values.email,\r\n          password_hash: SHA256(values.password_hash).toString(),\r\n          device_id: device_id,\r\n        })\r\n      );\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className={s.loginBlock}>\r\n      <div className={s.inner}>\r\n        <div>\r\n          <svg\r\n            width=\"177\"\r\n            height=\"201\"\r\n            viewBox=\"0 0 177 201\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M0 150.354V49.8543L84.7606 0L177 49.8543V150.354L84.7606 201L0 150.354Z\"\r\n              fill=\"#002DE3\"\r\n            />\r\n            <path\r\n              d=\"M108.516 50.7063C102.36 71.7391 84.5758 71.4398 76.4534 68.6611C73.3754 89.1809 78.5909 104.143 81.5833 109.059C102.103 96.7475 108.088 65.0274 108.516 50.7063Z\"\r\n              fill=\"white\"\r\n            />\r\n            <path\r\n              d=\"M98.8959 109.059C100.948 133.683 92.056 153.946 87.3535 161C120.698 153.305 135.447 107.777 138.653 85.9746C130.445 111.111 108.728 111.838 98.8959 109.059Z\"\r\n              fill=\"white\"\r\n            />\r\n            <path\r\n              d=\"M65.4986 86.5649C50.0012 87.508 36.8682 76.0525 32.2388 70.2069C37.825 106.75 60.4558 130.895 71.0729 138.4C62.6662 127.501 63.8539 99.3018 65.4986 86.5649Z\"\r\n              fill=\"white\"\r\n            />\r\n            <circle\r\n              cx=\"50.6121\"\r\n              cy=\"67.2632\"\r\n              r=\"5.77119\"\r\n              transform=\"rotate(-11.0772 50.6121 67.2632)\"\r\n              fill=\"white\"\r\n            />\r\n            <circle cx=\"89.278\" cy=\"53.2712\" r=\"5.77119\" fill=\"white\" />\r\n            <circle cx=\"118.775\" cy=\"94.3106\" r=\"5.77119\" fill=\"white\" />\r\n          </svg>\r\n        </div>\r\n        <div className={s.textBlock}>\r\n          <p className={s.Title}>Social Community App</p>\r\n          <p className={s.Text}>Events are in one place</p>\r\n        </div>\r\n        <h3>Вход в аккаунт</h3>\r\n        <form onSubmit={formik.handleSubmit} className={s.form}>\r\n          <div className={s.inputWrap}>\r\n            <Box sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n              <AlternateEmailIcon\r\n                sx={{ color: \"action.active\", mr: 1, my: 0.5 }}\r\n              />\r\n              <TextField\r\n                className={s.input}\r\n                id=\"email\"\r\n                name=\"email\"\r\n                label={\"Почта\"}\r\n                variant=\"standard\"\r\n                type=\"email\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n                style={formik.errors.email ? {border:'2px solid red'} : {}}\r\n              />\r\n\r\n            </Box>\r\n            {formik.errors.email && <span style={{color:'red', marginLeft:'5px'}}>{formik.errors.email}</span>}\r\n\r\n          </div>\r\n          <div className={s.inputWrap}>\r\n            <Box sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n              <LockIcon sx={{ color: \"action.active\", mr: 1, my: 0.5 }} />\r\n              <TextField\r\n                className={s.input}\r\n                id=\"password_hash\"\r\n                name=\"password_hash\"\r\n                label={\"Пароль\"}\r\n                variant=\"standard\"\r\n                type=\"password\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password_hash}\r\n                style={formik.errors.password_hash ? {border:'2px solid red'} : {}}\r\n              />\r\n            </Box>\r\n            {formik.errors.password_hash && <span style={{color:'red', marginLeft:'5px'}}>{formik.errors.password_hash}</span>}\r\n\r\n          </div>\r\n          <div className={s.btnWrap}>\r\n            <Button type=\"submit\" variant={\"contained\"} className={s.formBtn}>\r\n              Войти\r\n            </Button>\r\n          </div>\r\n        </form>\r\n        <div className={s.redirectBlock}>\r\n          <span className={s.redirectSpan}>Нет аккаунта?</span>\r\n          <NavLink to={\"/registration\"} className={s.signBtn}>\r\n            Зарегистрироваться\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import s from \"./styles.module.scss\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { FormikErrors, useFormik } from \"formik\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport AlternateEmailIcon from \"@mui/icons-material/AlternateEmail\";\r\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { registrationTC } from \"../../redux/registrationReducer\";\r\nimport SHA256 from \"crypto-js/sha256\";\r\n\r\ninterface InitialValuesType {\r\n  username: string;\r\n  email: string;\r\n  password_hash: string;\r\n}\r\n\r\nexport const Registration = () => {\r\n  const dispatch = useDispatch();\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: \"\",\r\n      email: \"\",\r\n      password_hash: \"\",\r\n    } as InitialValuesType,\r\n    validate: (values: InitialValuesType) => {\r\n      let errors: FormikErrors<InitialValuesType> = {};\r\n      if (!values.email) {\r\n        errors.email = \"Заполните поле\";\r\n      } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        errors.email = \"Неправильный email адрес\";\r\n      }\r\n      if (!values.password_hash) {\r\n        errors.password_hash = \"Введите пароль\";\r\n      }\r\n      if (!values.username) {\r\n        errors.password_hash = \"Заполните поле\";\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(\r\n          registrationTC({\r\n            username: values.username,\r\n            email: values.email,\r\n            password_hash: SHA256(values.password_hash).toString(),\r\n          })\r\n      );\r\n      formik.resetForm();\r\n    },\r\n  });\r\n  const goBack = () => {\r\n    window.history.go(-1);\r\n  };\r\n  return (\r\n      <div className={s.registerBlock}>\r\n        <div className={s.registerCard}>\r\n          <div>\r\n            <svg\r\n                width=\"177\"\r\n                height=\"201\"\r\n                viewBox=\"0 0 177 201\"\r\n                fill=\"none\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                  d=\"M0 150.354V49.8543L84.7606 0L177 49.8543V150.354L84.7606 201L0 150.354Z\"\r\n                  fill=\"#002DE3\"\r\n              />\r\n              <path\r\n                  d=\"M108.516 50.7063C102.36 71.7391 84.5758 71.4398 76.4534 68.6611C73.3754 89.1809 78.5909 104.143 81.5833 109.059C102.103 96.7475 108.088 65.0274 108.516 50.7063Z\"\r\n                  fill=\"white\"\r\n              />\r\n              <path\r\n                  d=\"M98.8959 109.059C100.948 133.683 92.056 153.946 87.3535 161C120.698 153.305 135.447 107.777 138.653 85.9746C130.445 111.111 108.728 111.838 98.8959 109.059Z\"\r\n                  fill=\"white\"\r\n              />\r\n              <path\r\n                  d=\"M65.4986 86.5649C50.0012 87.508 36.8682 76.0525 32.2388 70.2069C37.825 106.75 60.4558 130.895 71.0729 138.4C62.6662 127.501 63.8539 99.3018 65.4986 86.5649Z\"\r\n                  fill=\"white\"\r\n              />\r\n              <circle\r\n                  cx=\"50.6121\"\r\n                  cy=\"67.2632\"\r\n                  r=\"5.77119\"\r\n                  transform=\"rotate(-11.0772 50.6121 67.2632)\"\r\n                  fill=\"white\"\r\n              />\r\n              <circle cx=\"89.278\" cy=\"53.2712\" r=\"5.77119\" fill=\"white\" />\r\n              <circle cx=\"118.775\" cy=\"94.3106\" r=\"5.77119\" fill=\"white\" />\r\n            </svg>\r\n          </div>\r\n          <div className={s.textBlock}>\r\n            <p className={s.Title}>Social Community App</p>\r\n            <p className={s.Text}>Events are in one place</p>\r\n          </div>\r\n          <h3>Регистрация</h3>\r\n          <div className={s.formBlock}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <div className={s.inputWrap}>\r\n                <Box sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n                  <AccountCircleIcon\r\n                      sx={{ color: \"action.active\", mr: 1, my: 0.5 }}\r\n                  />\r\n                  <TextField\r\n                      className={s.input}\r\n                      id=\"username\"\r\n                      name=\"username\"\r\n                      label={\"Имя пользователя\"}\r\n                      variant=\"standard\"\r\n                      type=\"text\"\r\n                      onChange={formik.handleChange}\r\n                      value={formik.values.username}\r\n                      style={\r\n                        formik.errors.username ? { border: \"2px solid red\" } : {}\r\n                      }\r\n                  />\r\n                  {formik.errors.username && (\r\n                      <span style={{ color: \"red\", marginLeft: \"5px\" }}>\r\n                    {formik.errors.username}\r\n                  </span>\r\n                  )}\r\n                </Box>\r\n              </div>\r\n              <div className={s.inputWrap}>\r\n                <Box sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n                  <AlternateEmailIcon\r\n                      sx={{ color: \"action.active\", mr: 1, my: 0.5 }}\r\n                  />\r\n                  <TextField\r\n                      className={s.input}\r\n                      id=\"email\"\r\n                      name=\"email\"\r\n                      label={\"Почта\"}\r\n                      variant=\"standard\"\r\n                      type=\"email\"\r\n                      onChange={formik.handleChange}\r\n                      value={formik.values.email}\r\n                      style={formik.errors.email ? { border: \"2px solid red\" } : {}}\r\n                  />\r\n                </Box>\r\n                {formik.errors.email && (\r\n                    <span style={{ color: \"red\", marginLeft: \"5px\" }}>\r\n                  {formik.errors.email}\r\n                </span>\r\n                )}\r\n              </div>\r\n              <div className={s.inputWrap}>\r\n                <Box sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n                  <LockIcon sx={{ color: \"action.active\", mr: 1, my: 0.5 }} />\r\n                  <TextField\r\n                      className={s.input}\r\n                      id=\"password_hash\"\r\n                      name=\"password_hash\"\r\n                      label={\"Пароль\"}\r\n                      variant=\"standard\"\r\n                      type=\"password\"\r\n                      onChange={formik.handleChange}\r\n                      value={formik.values.password_hash}\r\n                      style={\r\n                        formik.errors.password_hash\r\n                            ? { border: \"2px solid red\" }\r\n                            : {}\r\n                      }\r\n                  />\r\n                  {formik.errors.password_hash && (\r\n                      <span style={{ color: \"red\", marginLeft: \"5px\" }}>\r\n                    {formik.errors.password_hash}\r\n                  </span>\r\n                  )}\r\n                </Box>\r\n              </div>\r\n              <div className={s.btnWrap}>\r\n                <Button type=\"submit\" variant={\"contained\"} className={s.formBtn}>\r\n                  Зарегистрироваться\r\n                </Button>\r\n              </div>\r\n            </form>\r\n            <div className={s.redirectBlock}>\r\n              <span className={s.redirectSpan}>Уже есть аккаунт?</span>\r\n              <NavLink to={\"/login\"} className={s.signBtn}>\r\n                Войти\r\n              </NavLink>\r\n            </div>\r\n            {/*<div className={s.inputItem}>*/}\r\n            {/*    <label htmlFor=\"registration/password\">Password</label>*/}\r\n            {/*    <Input placeholder=\"Enter password...\"*/}\r\n            {/*           type=\"password\"*/}\r\n            {/*        // value={password}*/}\r\n            {/*        // onChange={onChangePasswordHandler}*/}\r\n            {/*           id={'registration/password'}*/}\r\n            {/*           autoComplete={'new-password'}*/}\r\n            {/*        // view=\"submit\"*/}\r\n            {/*        // errorMessage={errorPasswordMessage}*/}\r\n            {/*    />*/}\r\n\r\n            {/*</div>*/}\r\n            {/*<div className={s.inputItem}>*/}\r\n            {/*    <label htmlFor=\"registration/checkPassword\">Confirm password</label>*/}\r\n            {/*    <Input placeholder=\"Confirm password...\"*/}\r\n            {/*           type=\"password\"*/}\r\n            {/*        // value={checkPassword}*/}\r\n            {/*        // onChange={onChangePasswordCheckHandler}*/}\r\n            {/*           id={'registration/checkPassword'}*/}\r\n            {/*           autoComplete={'new-password'}*/}\r\n            {/*        // view=\"submit\"*/}\r\n            {/*        // errorMessage={errorPasswordMessage}*/}\r\n            {/*    />*/}\r\n            {/*</div>*/}\r\n            {/*/!*{!emailValidation(email) &&*!/*/}\r\n            {/*/!*    <div style={{color: 'red'}}>{serverErrorMessage} </div>}*!/*/}\r\n            {/*<div className={s.buttonsBlock}>*/}\r\n            {/*    <button className={s.cancel} onClick={goBack}>Cancel</button>*/}\r\n            {/*    <button*/}\r\n            {/*        type=\"submit\"*/}\r\n            {/*        className={s.register}*/}\r\n            {/*        // onClick={onRegistrationHandler}*/}\r\n            {/*        // disabled={appStatus === 'loading'}*/}\r\n            {/*        // disabled={disabledBtnSubmit}*/}\r\n            {/*    >*/}\r\n            {/*        Register*/}\r\n            {/*    </button>*/}\r\n            {/*</div>*/}\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport s from \"./styles.module.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootType } from \"../../redux/redux-store\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { addPost, changeLikesStatus, getPosts } from \"../../redux/PostsReducer\";\r\nimport { AddPostParams, Post } from \"../../api/types/post\";\r\nimport { ProfilePost } from \"../profile/post/ProfilePost\";\r\nimport { Button } from \"@mui/material\";\r\nimport { PostModal } from \"../../components/postModal/PostModal\";\r\nimport { Preloader } from \"../../components/preloader/Preloader\";\r\nimport { RequestStatusType } from \"../../redux/appReducer\";\r\n\r\nexport const Posts = () => {\r\n  const isAuth = useSelector<AppRootType, boolean>((state) => state.app.isAuth);\r\n\r\n  const posts = useSelector<AppRootType, Post[]>(\r\n    (state) => state.postsReducer.posts\r\n  );\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const status = useSelector<AppRootType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  useEffect(() => {\r\n    dispatch(getPosts({ limit: 10, offset: 0 }));\r\n  }, []);\r\n\r\n  const changeIsLikedStatus = (id: number, likedStatus: boolean) => {\r\n    dispatch(changeLikesStatus(id, likedStatus));\r\n  };\r\n\r\n  if (!isAuth) {\r\n    history.push(\"/login\");\r\n  }\r\n  const handleClose = () => setOpen(false);\r\n  const addPostHandler = (params: AddPostParams) => {\r\n    dispatch(addPost(params));\r\n  };\r\n\r\n  if (status === \"loading\") {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <div className={s.inner}>\r\n        <h1>Все посты</h1>\r\n        <div className={s.addPostWrap}>\r\n          <Button onClick={() => setOpen(true)}>Добавить пост</Button>\r\n        </div>\r\n        <div className={s.postsWrap}>\r\n          {posts.map((card, index) => {\r\n            return (\r\n              <ProfilePost\r\n                key={index}\r\n                firstName={card?.author?.first_name}\r\n                lastName={card?.author?.last_name}\r\n                image={card?.author?.avatar?.url}\r\n                text={card?.text}\r\n                postImage={card?.image?.url}\r\n                topic={card?.topic}\r\n                time={card?.publish_time}\r\n                isLiked={card?.is_user_liked}\r\n                likesCount={card?.likes_count}\r\n                changeIsLikedStatus={changeIsLikedStatus}\r\n                id={card?.id}\r\n                commentsCount={card?.comments_count}\r\n                comments={card?.comments}\r\n                isPostsPage={true}\r\n                userId={card?.author.id}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <PostModal\r\n        title={\"Добавление нового поста\"}\r\n        handleClose={handleClose}\r\n        isOpen={open}\r\n        addPost={addPostHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import Modal from \"@mui/material/Modal/Modal\";\r\nimport { Box, Button, TextField } from \"@mui/material\";\r\nimport s from \"./styles.module.scss\";\r\nimport { ChangeEvent, FC, useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateProfileImage } from \"../../redux/ProfileReducer\";\r\n\r\ninterface IProps {\r\n  image: string;\r\n  handleClose: () => void;\r\n  isOpen: boolean;\r\n  changeImage: (value: string) => void;\r\n}\r\n\r\nexport const ChangePhotoModal: FC<IProps> = ({\r\n  image,\r\n  handleClose,\r\n  isOpen,\r\n  changeImage,\r\n}) => {\r\n  const inRef = useRef<HTMLInputElement>(null);\r\n  const [code, setCode] = useState(true);\r\n  const [base64, setBase64] = useState(true); // base64 - true, text - false\r\n  const [text, setText] = useState(\"\");\r\n  const [file, setFile] = useState<any>();\r\n  const [fileURL, setFileURL] = useState<any>();\r\n  const [file64, setFile64] = useState<any>();\r\n  const [fileData, setFileData] = useState<any>();\r\n  const dispatch = useDispatch();\r\n  const fileByteArray = [] as any[];\r\n\r\n  const upload = (e: ChangeEvent<HTMLInputElement>) => {\r\n    // e.preventDefault();\r\n    const reader = new FileReader();\r\n    const formData = new FormData(); // for send to back\r\n\r\n    const newFile = e.target.files && e.target.files[0]; //достаем из таргета файлы, если файлы есть - прилетает массив, откуда достаем 0\r\n    if (newFile) {\r\n      setFile(newFile);\r\n      setFileURL(window.URL.createObjectURL(newFile)); //спецовая функция Window, так мы можем отобразить newFile в img, эта функция генерит спец ссылку, которая видна только внутри этого проекта\r\n      formData.append(\"avatar\", newFile, newFile.name);\r\n      setFileData(formData);\r\n      if (code) {\r\n        // reader\r\n        reader.onloadend = () => {\r\n          setFile64(reader.result);\r\n        };\r\n        if (base64) reader.readAsDataURL(newFile);\r\n        else reader.readAsText(newFile);\r\n      }\r\n    }\r\n  };\r\n  const saveDataHandler = () => {\r\n    dispatch(updateProfileImage({ avatar: file }));\r\n  };\r\n  return (\r\n    <Modal open={isOpen} onClose={handleClose}>\r\n      <Box className={s.modalBlock}>\r\n        <div className={s.top}>\r\n          <h2 className={s.title}>\r\n            Редактировать изображение профиля\r\n            <button\r\n              className={s.cancelBtn}\r\n              onClick={() => {\r\n                handleClose();\r\n              }}\r\n            >\r\n              <svg\r\n                width=\"14\"\r\n                fill={\"red\"}\r\n                height=\"14\"\r\n                viewBox=\"0 0 14 14\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path d=\"M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z\" />\r\n              </svg>\r\n            </button>\r\n          </h2>\r\n        </div>\r\n        <div className={s.content}>\r\n          <div className={s.imgWrap}>\r\n            <h6>Аватар</h6>\r\n            <img src={file64 ? file64 : image} alt=\"profile image\" />\r\n            <div className={s.changeImgInput}>\r\n              <TextField\r\n                type=\"file\"\r\n                name=\"image\"\r\n                onChange={upload}\r\n                ref={inRef}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className={s.btnWrap}>\r\n            <Button\r\n              disabled={!file}\r\n              variant={\"contained\"}\r\n              onClick={saveDataHandler}\r\n            >\r\n              Сохранить\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\nimport { Button, Paper } from \"@mui/material\";\r\nimport s from \"./styles.module.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ChangePhotoModal } from \"../../../components/changePhotoModal/ChangePhotoModal\";\r\nimport { updateProfileImage } from \"../../../redux/ProfileReducer\";\r\n\r\ninterface IProps {\r\n  image: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\nexport const ProfileSettingsCard: FC<IProps> = ({\r\n  image,\r\n  username,\r\n  lastName,\r\n  firstName,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = () => setIsOpen(false);\r\n  const changeImage = (value: string) => {\r\n    dispatch(updateProfileImage({ avatar: value }));\r\n  };\r\n\r\n  return (\r\n    <Paper className={s.profileCard}>\r\n      <div className={s.inner}>\r\n        <div className={s.imgBlock}>\r\n          <h5>Профиль</h5>\r\n          <img src={image} alt=\"\" />\r\n        </div>\r\n        <div className={s.textBlock}>\r\n          <h5>{firstName + \" \" + lastName}</h5>\r\n          <span>@{username}</span>\r\n          <Button\r\n            className={s.applyButton}\r\n            variant={\"contained\"}\r\n            onClick={() => setIsOpen(true)}\r\n          >\r\n            Изменить фотографию\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <ChangePhotoModal\r\n        image={image}\r\n        handleClose={handleClose}\r\n        isOpen={isOpen}\r\n        changeImage={changeImage}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\nimport { Button, Paper, TextField } from \"@mui/material\";\r\nimport s from \"./styles.module.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateProfile } from \"../../../redux/ProfileReducer\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\n\r\ninterface InitialValuesType {\r\n  first_name: string;\r\n  last_name: string;\r\n}\r\n\r\ninterface IProps {\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\nexport const InfoSettingsCard: FC<IProps> = ({ lastName, firstName }) => {\r\n  const dispatch = useDispatch();\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      first_name: firstName,\r\n      last_name: lastName,\r\n    } as InitialValuesType,\r\n    validate: (values: InitialValuesType) => {\r\n      let errors: FormikErrors<InitialValuesType> = {};\r\n      if (!values.first_name) {\r\n        errors.first_name = 'Заполните поле';\r\n      }\r\n      if (!values.last_name) {\r\n        errors.last_name = 'Заполните поле';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(\r\n        updateProfile({\r\n          first_name: values.first_name,\r\n          last_name: values.last_name,\r\n        })\r\n      );\r\n    },\r\n  });\r\n  return (\r\n    <Paper className={s.infoCard}>\r\n      <h5 className={s.title}>Личная информация</h5>\r\n      <div className={s.inputsBlock}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <div className={s.inputWrap}>\r\n            <h6>Имя</h6>\r\n            <TextField\r\n              type={\"text\"}\r\n              value={formik.values.first_name}\r\n              className={s.input}\r\n              name={\"first_name\"}\r\n              onChange={formik.handleChange}\r\n              placeholder={\"введите текст\"}\r\n              style={formik.errors.first_name ? {border:'2px solid red'} : {}}\r\n\r\n            />\r\n            {formik.errors.first_name && <span style={{color:'red'}}>{formik.errors.first_name}</span>}\r\n\r\n          </div>\r\n          <div className={s.inputWrap}>\r\n            <h6>Фамилия</h6>\r\n            <TextField\r\n              type={\"text\"}\r\n              name={\"last_name\"}\r\n              value={formik.values.last_name}\r\n              className={s.input}\r\n              onChange={formik.handleChange}\r\n              placeholder={\"введите текст\"}\r\n              style={formik.errors.last_name ? {border:'2px solid red'} : {}}\r\n            />\r\n            {formik.errors.last_name && <span style={{color:'red'}}>{formik.errors.last_name}</span>}\r\n\r\n          </div>\r\n          <div className={s.btnWrap}>\r\n            <Button variant={\"contained\"} className={s.applyButton} type={\"submit\"}>\r\n              Изменить данные\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\nimport { Button, Checkbox, FormControlLabel, Paper } from \"@mui/material\";\r\nimport s from \"./styles.module.scss\";\r\nimport { topics } from \"../../../utils/topics\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateProfile } from \"../../../redux/ProfileReducer\";\r\n\r\ninterface IProps {\r\n  profileInterests: string[];\r\n}\r\n\r\nexport const InterestsSettingCard: FC<IProps> = ({ profileInterests }) => {\r\n  const [interests, setInterests] = useState<string[]>(profileInterests);\r\n  const dispatch = useDispatch();\r\n\r\n  const saveDataHandler = () => {\r\n    dispatch(updateProfile({ interests: interests }));\r\n  };\r\n  return (\r\n    <Paper className={s.interestsCard}>\r\n      <div className={s.inner}>\r\n        <h5 className={s.title}>Выбор интересов</h5>\r\n        <div className={s.checkboxes}>\r\n          {topics.map((topic, index) => {\r\n            return (\r\n              <FormControlLabel\r\n                value={topic}\r\n                checked={interests && interests.includes(topic.value)}\r\n                control={\r\n                  <Checkbox\r\n                    style={{ display: \"none\" }}\r\n                    onChange={(e) => {\r\n                      if (e.currentTarget.checked) {\r\n                        setInterests([...interests, topic.value]);\r\n                        console.log(interests);\r\n                      } else {\r\n                        setInterests(\r\n                          interests.filter((f) => f !== topic.value)\r\n                        );\r\n                        console.log(interests);\r\n                      }\r\n                    }}\r\n                  />\r\n                }\r\n                label={\r\n                  <div\r\n                    style={\r\n                      interests.includes(topic.value)\r\n                        ? { backgroundColor: \"#E96344\" }\r\n                        : { backgroundColor: \"#F0927C\" }\r\n                    }\r\n                    className={s.inputLabel}\r\n                  >\r\n                    {topic.label}\r\n                  </div>\r\n                }\r\n                labelPlacement=\"end\"\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <Button disabled={profileInterests==interests} variant={\"contained\"} className={s.applyButton} onClick={saveDataHandler}>\r\n          Сохранить интересы\r\n        </Button>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Button, Paper, TextField } from \"@mui/material\";\r\nimport s from \"./styles.module.scss\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport { changeProfilePassword } from \"../../../redux/ProfileReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport SHA256 from \"crypto-js/sha256\";\r\n\r\ninterface InitialValuesType {\r\n  newPassword: string;\r\n  oldPassword: string;\r\n}\r\n\r\ninterface IProps {}\r\n\r\nexport const PasswordSettingCard: FC<IProps> = ({}) => {\r\n  const dispatch = useDispatch();\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      newPassword: \"\",\r\n      oldPassword: \"\",\r\n    } as InitialValuesType,\r\n    validate: (values: InitialValuesType) => {\r\n      let errors: FormikErrors<InitialValuesType> = {};\r\n      if (!values.newPassword) {\r\n        errors.newPassword = 'Заполните поле';\r\n      }\r\n      if (!values.oldPassword) {\r\n        errors.oldPassword = 'Заполните поле';\r\n      }\r\n\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(\r\n        changeProfilePassword({\r\n          new_password_hash: SHA256(values.newPassword).toString(),\r\n          old_password_hash: SHA256(values.oldPassword).toString(),\r\n        })\r\n      );\r\n    },\r\n  });\r\n  return (\r\n    <Paper className={s.passwordCard}>\r\n      <h5 className={s.title}>Изменить пароль</h5>\r\n      <div className={s.inputsBlock}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <div className={s.inputWrap}>\r\n            <h6>Старый пароль</h6>\r\n            <TextField\r\n              type={\"password\"}\r\n              name={\"newPassword\"}\r\n              className={s.input}\r\n              value={formik.values.newPassword}\r\n              onChange={formik.handleChange}\r\n              placeholder={\"введите пароль\"}\r\n              style={formik.errors.newPassword ? {border:'2px solid red'} : {}}\r\n            />\r\n            {formik.errors.newPassword && <span style={{color:'red'}}>{formik.errors.newPassword}</span>}\r\n\r\n          </div>\r\n          <div className={s.inputWrap}>\r\n            <h6>Новый пароль</h6>\r\n            <TextField\r\n              type={\"password\"}\r\n              name={\"oldPassword\"}\r\n              className={s.input}\r\n              value={formik.values.oldPassword}\r\n              onChange={formik.handleChange}\r\n              placeholder={\"введите пароль\"}\r\n              style={formik.errors.oldPassword ? {border:'2px solid red'} : {}}\r\n            />\r\n            {formik.errors.oldPassword && <span style={{color:'red'}}>{formik.errors.oldPassword}</span>}\r\n\r\n          </div>\r\n          <div className={s.btnWrap}>\r\n            <Button\r\n              variant={\"contained\"}\r\n              className={s.applyButton}\r\n              type={\"submit\"}\r\n            >\r\n              Изменить пароль\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Preloader } from \"../../components/preloader/Preloader\";\r\nimport React, { ChangeEvent, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootType } from \"../../redux/redux-store\";\r\nimport { RequestStatusType } from \"../../redux/appReducer\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport s from \"./styles.module.scss\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  FormControlLabel,\r\n  Paper,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { ProfileResponse } from \"../../api/types/profile\";\r\nimport { useFormik } from \"formik\";\r\nimport {\r\n  changeProfilePassword,\r\n  updateProfile,\r\n} from \"../../redux/ProfileReducer\";\r\nimport SHA256 from \"crypto-js/sha256\";\r\nimport { topics } from \"../../utils/topics\";\r\nimport { ProfileSettingsCard } from \"./profileSettingsCard/ProfileSettingsCard\";\r\nimport { InfoSettingsCard } from \"./infroSettingsCard/InfoSettingsCard\";\r\nimport { InterestsSettingCard } from \"./interestsSettingCard/InterestsSettingCard\";\r\nimport { PasswordSettingCard } from \"./passwordSettingCard/PasswordSettingCard\";\r\n\r\ninterface InitialValuesType {\r\n  username: string;\r\n  email: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  image: string;\r\n  // interests: string[],\r\n}\r\n\r\nexport const Settings = () => {\r\n  const status = useSelector<AppRootType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  const isAuth = useSelector<AppRootType, boolean>((state) => state.app.isAuth);\r\n  const history = useHistory();\r\n  const profile = useSelector<AppRootType, ProfileResponse>(\r\n    (state) => state.profilePage.profile\r\n  );\r\n\r\n  if (!isAuth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  if (status === \"loading\") {\r\n    return <Preloader />;\r\n  }\r\n  console.log(profile);\r\n  return (\r\n    <div className={s.settings}>\r\n      <Container>\r\n        <div className={s.inner}>\r\n          <div className={s.top}>\r\n            <h1>Настройки пользователя</h1>\r\n          </div>\r\n          <div className={s.content}>\r\n            <ProfileSettingsCard\r\n              image={profile?.avatar?.url}\r\n              firstName={profile?.first_name}\r\n              lastName={profile?.last_name}\r\n              username={profile?.username}\r\n            />\r\n            <InfoSettingsCard\r\n              firstName={profile?.first_name}\r\n              lastName={profile?.last_name}\r\n            />\r\n            <InterestsSettingCard profileInterests={profile?.interests} />\r\n            <PasswordSettingCard />\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","import Paper from \"@mui/material/Paper\";\r\nimport s from \"./styles.module.scss\";\r\nimport {Button, TextField} from \"@mui/material\";\r\nimport React, {FC, useEffect} from \"react\";\r\nimport {ChannelMessage} from \"../../../api/types/channels\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {startMessagesListening} from \"../../../redux/ChatReducer\";\r\n\r\ninterface IProps{\r\n    messages:ChannelMessage[]\r\n    channelId:number | null\r\n}\r\nexport const ChannelMessages:FC<IProps> =(\r\n    {messages,channelId}\r\n)=>{\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        if(channelId){\r\n            dispatch(startMessagesListening(channelId))\r\n        }\r\n    },[])\r\n    return(\r\n        <Paper variant=\"outlined\" className={s.inner}>\r\n            <div className={s.chatMessageList}>\r\n                {messages.map((message,index)=>{\r\n                    return(\r\n                        <div className={s.message} key={index}>\r\n                            {/*<img src={chanel.image.url} alt=\"channel image\"/>*/}\r\n                            <div className={s.top}>\r\n                                <img className={s.messageImage} src={message?.author?.avatar?.url} alt=\"channel image\"/>\r\n                                <h6 className={s.username}>{message?.author?.first_name}</h6>\r\n                            </div>\r\n                            <div className={s.text}>{message?.text}</div>\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n\r\n                <div className={s.addMessageBlock}>\r\n                    <div className={s.inputWrap}>\r\n                        <TextField placeholder={'Введите текст'} className={s.input}/>\r\n                    </div>\r\n                    <div className={s.btnWrap}>\r\n                        <Button variant={'contained'}>Отправить</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}","import Modal from \"@mui/material/Modal/Modal\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    MenuItem,\r\n    Select,\r\n    SelectChangeEvent,\r\n    TextField,\r\n} from \"@mui/material\";\r\n\r\nimport s from \"./styles.module.scss\";\r\nimport React, {ChangeEvent, FC, useRef, useState} from \"react\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport {topics} from \"../../utils/topics\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createChannel} from \"../../redux/ChatReducer\";\r\nimport {AppRootType} from \"../../redux/redux-store\";\r\n\r\ninterface IProps {\r\n    title: string;\r\n    handleClose: () => void;\r\n    isOpen: boolean;\r\n\r\n}\r\n\r\ninterface InitialValuesType {\r\n    name: string;\r\n}\r\n\r\n\r\nexport const AddChannelModal: FC<IProps> = ({\r\n                                                title,\r\n                                                handleClose,\r\n                                                isOpen,\r\n                                                children,\r\n                                            }) => {\r\n\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n    const [file, setFile] = useState<any>();\r\n    const authId = useSelector<AppRootType,number | null>(state=>state.profilePage.userId)\r\n    const dispatch = useDispatch()\r\n    const upload = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newFile = e.target.files && e.target.files[0]; //достаем из таргета файлы, если файлы есть - прилетает массив, откуда достаем 0\r\n        if (newFile) {\r\n            setFile(newFile);\r\n        }\r\n    };\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: \"\",\r\n        } as InitialValuesType,\r\n        validate: (values: InitialValuesType) => {\r\n            let errors: FormikErrors<InitialValuesType> = {};\r\n            if (!values.name) {\r\n                errors.name = 'Заполните поле';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(createChannel({\r\n                create_params:{\r\n                    name:values.name,\r\n                    type:\"GROUP\",\r\n                    members_ids:[authId ? authId : 67]\r\n                },\r\n                image:file\r\n            }))\r\n            handleClose();\r\n        },\r\n    });\r\n    return (\r\n        <Modal open={isOpen} onClose={handleClose}>\r\n            <Box className={s.modalBlock}>\r\n                <div className={s.top}>\r\n                    <h2 className={s.title}>\r\n                        {title}\r\n                        <button\r\n                            className={s.cancelBtn}\r\n                            onClick={() => {\r\n                                handleClose();\r\n                            }}\r\n                        >\r\n                            <svg\r\n                                width=\"14\"\r\n                                fill={\"red\"}\r\n                                height=\"14\"\r\n                                viewBox=\"0 0 14 14\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                            >\r\n                                <path\r\n                                    d=\"M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z\"/>\r\n                            </svg>\r\n                        </button>\r\n                    </h2>\r\n                </div>\r\n                <div className={s.content}>\r\n                    <form onSubmit={formik.handleSubmit} className={s.form}>\r\n                        <div className={s.inputWrap}>\r\n                            <h6>Введите название чата</h6>\r\n                            <TextField\r\n                                className={s.input}\r\n                                placeholder={\"Введите текст\"}\r\n                                name=\"name\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.name}\r\n                                style={formik.errors.name ? {border: '2px solid red'} : {}}\r\n                            />\r\n                            {formik.errors.name && <span style={{color:'red', marginLeft:'5px'}}>{formik.errors.name}</span>}\r\n\r\n                        </div>\r\n                        <div className={s.inputWrap}>\r\n                            <h6>Выберите изображение</h6>\r\n                            <TextField\r\n                                className={`${s.imageInput}  ${s.input}`}\r\n                                type=\"file\"\r\n                                name=\"image\"\r\n                                onChange={upload}\r\n                                ref={inRef}\r\n                            />\r\n                        </div>\r\n                        <div className={s.btnWrap}>\r\n                            <Button variant={\"contained\"} type=\"submit\">\r\n                                Создать чат\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Box>\r\n        </Modal>\r\n    );\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../redux/appReducer\";\r\nimport {ChannelMessage, ChannelsResponse} from \"../../api/types/channels\";\r\nimport {AppRootType} from \"../../redux/redux-store\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Preloader} from \"../../components/preloader/Preloader\";\r\nimport {Button, TextField} from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport s from \"./styles.module.scss\";\r\nimport {getChannels, getMessagesById} from \"../../redux/ChatReducer\";\r\nimport {ChannelMessages} from \"./channelMessages/ChannelMessages\";\r\nimport {ChannelParams} from \"../../api/types/post\";\r\nimport {AddChannelModal} from \"../../components/addChannelModal/AddChannelModal\";\r\n\r\nconst messages=[\r\n  {name:'Ivan',text:'loremaadadadadad'},\r\n  {name:'Stepan',text:'lvk12222222'},\r\n  {name:'John',text:'12345'},\r\n]\r\n\r\nexport const Channels = () => {\r\n  const isAuth = useSelector<AppRootType, boolean>((state) => state.app.isAuth);\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  if (!isAuth) {\r\n    history.push(\"/login\");\r\n  }\r\n  const status = useSelector<AppRootType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  const channels = useSelector<AppRootType, ChannelsResponse[]>(\r\n    (state) => state.chat.channels\r\n  );\r\n  const currentMessages = useSelector<AppRootType, ChannelMessage[]>(\r\n      (state) => state.chat.messages\r\n  );\r\n  const [localId,setLocalId]=useState<number | null>(null)\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(getChannels());\r\n    console.log(channels)\r\n\r\n  }, []);\r\n\r\n  const handleClose = () => setOpen(false);\r\n  const createChannelHandler = () => {\r\n    console.log(\"create channel\");\r\n  };\r\n\r\n  if (status === \"loading\") {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const getMessagesHandler =(id:number)=>{\r\n    dispatch(getMessagesById(id,{ limit: 10, offset: 0 }))\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={s.channelsBlock}>\r\n      <Button onClick={() => setOpen(true)}>Создать чат</Button>\r\n      <div className={s.chatBlock}>\r\n        <Paper variant=\"outlined\">\r\n          <div className={s.chatCardList}>\r\n            {channels.map((chanel,index)=>{\r\n              return(\r\n                  <div className={s.channel} onClick={()=> {\r\n                    getMessagesHandler(chanel.id)\r\n                    setLocalId(chanel.id)\r\n                  }}>\r\n                    <img src={chanel.image.url} alt=\"channel image\"/>\r\n                    <div className={s.channelName}>{chanel.name}</div>\r\n                  </div>\r\n\r\n              )\r\n            })}\r\n          </div>\r\n        </Paper>\r\n      <ChannelMessages messages={currentMessages} channelId={localId}/>\r\n      </div>\r\n\r\n      <AddChannelModal title={'Создать новый чат'} isOpen={open} handleClose={handleClose} />\r\n    </div>\r\n  );\r\n};\r\n","import { Redirect, Route } from \"react-router-dom\";\r\nimport { WithSuspense } from \"../hoc/WithSuspense\";\r\nimport Profile from \"../../features/profile/Profile\";\r\nimport { Login } from \"../../features/login/Login\";\r\nimport { Registration } from \"../../features/registration/Registration\";\r\nimport React from \"react\";\r\nimport { Posts } from \"../../features/posts/Posts\";\r\nimport { Settings } from \"../../features/settings/Settings\";\r\nimport { Channels } from \"../../features/chat/Channels\"\r\n\r\nexport const Routes = () => {\r\n  return (\r\n    <>\r\n      <Route path={\"/profile/:userId?\"} render={WithSuspense(Profile)} />\r\n      <Route path={\"/posts\"} render={WithSuspense(Posts)} />\r\n      <Route path={\"/login\"} render={() => <Login />} />\r\n      <Route path={\"/registration\"} render={() => <Registration />} />\r\n      <Route path={\"/settings\"} render={() => <Settings />} />\r\n      <Route path={\"/channels\"} render={() => <Channels />} />\r\n      <Redirect from=\"/\" to=\"/Profile\" />\r\n    </>\r\n  );\r\n};\r\n","import React, {useEffect} from 'react';\r\nimport Sidebar from '../../components/sidebar/Sidebar';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nimport {Preloader} from \"../../components/preloader/Preloader\";\r\nimport Header from \"../../components/header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../redux/redux-store\";\r\nimport {Routes} from \"../../components/routes/Routes\";\r\nimport s from './styles.module.scss';\r\nimport {getAuthData} from \"../../redux/AuthReducer\";\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootType, boolean>(state => state.app.isInitialized)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAuthData())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    } else\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className={s.appWrapper}>\r\n                    <Header/>\r\n                    <div className={s.inner}>\r\n                        <Routes/>\r\n                    </div>\r\n                    <Sidebar/>\r\n                </div>\r\n            </BrowserRouter>\r\n        )\r\n}\r\n\r\n\r\n\r\n","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport store from './redux/redux-store';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {App} from \"./features/app/App\";\nreportWebVitals();\n\n\nReactDOM.render(\n    <BrowserRouter>\n    <Provider store={store}>\n        <App />\n    </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"styles_loginBlock__1Mer9\",\"inner\":\"styles_inner__kqyJM\",\"textBlock\":\"styles_textBlock__GsAfI\",\"Text\":\"styles_Text__2Q1ug\",\"Title\":\"styles_Title__2zP-W\",\"redirectBlock\":\"styles_redirectBlock__2WOBc\",\"signBtn\":\"styles_signBtn__wgeJ6\",\"link\":\"styles_link__2kPuT\",\"form\":\"styles_form__2Xg9G\",\"inputWrap\":\"styles_inputWrap__ZQUlb\",\"input\":\"styles_input__hSA05\",\"btnWrap\":\"styles_btnWrap__3SFQI\",\"formBtn\":\"styles_formBtn__LeTsR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBlock\":\"styles_modalBlock__1yUHz\",\"top\":\"styles_top__3uwRt\",\"title\":\"styles_title__3ko_R\",\"cancelBtn\":\"styles_cancelBtn__3vrib\",\"content\":\"styles_content__1ZB1x\",\"textAreaWrap\":\"styles_textAreaWrap__rmp-2\",\"textArea\":\"styles_textArea__2l5YW\",\"selectWrap\":\"styles_selectWrap__ab_cE\",\"select\":\"styles_select__2KVcL\",\"inputWrap\":\"styles_inputWrap__194sf\",\"btnWrap\":\"styles_btnWrap__1Fhg6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"styles_profile__2Rjea\",\"inner\":\"styles_inner__3Ak_m\",\"top\":\"styles_top__2vbM1\",\"topContainer\":\"styles_topContainer__39LdR\",\"bottom\":\"styles_bottom__HbYoW\",\"bottomContainer\":\"styles_bottomContainer__22lkt\",\"title\":\"styles_title__3lJRZ\",\"interests\":\"styles_interests__2i0lc\",\"postsTitle\":\"styles_postsTitle__2EpWA\",\"postsWrap\":\"styles_postsWrap__1XxHp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBlock\":\"styles_modalBlock__3Scix\",\"top\":\"styles_top__lFIWS\",\"title\":\"styles_title__2-3wH\",\"cancelBtn\":\"styles_cancelBtn__2IH_7\",\"content\":\"styles_content__2OmN_\",\"inputWrap\":\"styles_inputWrap__9ORlK\",\"input\":\"styles_input__3r2gp\",\"selectWrap\":\"styles_selectWrap__2iKy6\",\"select\":\"styles_select__3VHxu\",\"btnWrap\":\"styles_btnWrap__1rWK7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner\":\"styles_inner__2zbXI\",\"chatMessageList\":\"styles_chatMessageList__2tFha\",\"message\":\"styles_message__2s6oU\",\"top\":\"styles_top__EGAU4\",\"messageImage\":\"styles_messageImage__FMF2X\",\"text\":\"styles_text__1kh3_\",\"addMessageBlock\":\"styles_addMessageBlock__3Nhvx\",\"inputWrap\":\"styles_inputWrap__MbJBp\",\"input\":\"styles_input__3tuVD\",\"btnWrap\":\"styles_btnWrap__3rOBt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoCard\":\"styles_infoCard__1pge8\",\"inputsBlock\":\"styles_inputsBlock__2midh\",\"inputWrap\":\"styles_inputWrap__2KwF1\",\"input\":\"styles_input__2YtMl\",\"btnWrap\":\"styles_btnWrap__2jcmj\",\"applyButton\":\"styles_applyButton__3d75r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passwordCard\":\"styles_passwordCard__2Ah1v\",\"inputsBlock\":\"styles_inputsBlock__2LgJ1\",\"inputWrap\":\"styles_inputWrap__3dBl_\",\"input\":\"styles_input__3OBZU\",\"btnWrap\":\"styles_btnWrap__1CQ0b\",\"applyButton\":\"styles_applyButton__2Fm10\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBlock\":\"styles_modalBlock__Z247w\",\"top\":\"styles_top__3Hmhv\",\"title\":\"styles_title__2KNUZ\",\"cancelBtn\":\"styles_cancelBtn__3pn93\",\"applyButton\":\"styles_applyButton__3kQA_\",\"content\":\"styles_content__2QmVA\",\"imgWrap\":\"styles_imgWrap__3gqLN\",\"changeImgInput\":\"styles_changeImgInput__2aDig\",\"btnWrap\":\"styles_btnWrap__2zb5z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"styles_comment__3wU80\",\"commentTop\":\"styles_commentTop__3fbeV\",\"topText\":\"styles_topText__1oXub\",\"time\":\"styles_time__1L0yy\",\"content\":\"styles_content__WhoRy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"interestsCard\":\"styles_interestsCard__15TIY\",\"inner\":\"styles_inner__2IVhs\",\"applyButton\":\"styles_applyButton__1YTku\",\"checkboxes\":\"styles_checkboxes__2Mo4Q\",\"inputLabel\":\"styles_inputLabel__1wmAW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__1XInc\",\"logo\":\"styles_logo__1tffg\",\"logoText\":\"styles_logoText__1Y5uD\",\"headerLogin\":\"styles_headerLogin__3Vvdz\",\"loginBtn\":\"styles_loginBtn__1YCEB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileCard\":\"styles_profileCard__2wETv\",\"inner\":\"styles_inner__2buHC\",\"imgBlock\":\"styles_imgBlock__2dnbh\",\"textBlock\":\"styles_textBlock__3WC3z\",\"applyButton\":\"styles_applyButton__29Iri\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"channelsBlock\":\"styles_channelsBlock__10dsS\",\"chatBlock\":\"styles_chatBlock__3rrWT\",\"chatCardList\":\"styles_chatCardList__39d3w\",\"channel\":\"styles_channel__b4glh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"styles_postsBlock__3zim6\",\"inner\":\"styles_inner__2rovi\",\"addPostWrap\":\"styles_addPostWrap__T-E8x\",\"postsWrap\":\"styles_postsWrap__2jael\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"styles_settings__jorz-\",\"inner\":\"styles_inner__Z82s_\",\"top\":\"styles_top__24bCI\",\"content\":\"styles_content__2-GpD\"};"],"sourceRoot":""}